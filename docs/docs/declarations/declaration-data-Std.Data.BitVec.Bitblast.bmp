{"name":"Std.Data.BitVec.Bitblast","instances":[],"imports":["Init","Std.Data.BitVec.Folds"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L171-L172","name":"Std.BitVec.allOnes_sub_eq_not","line":171,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.allOnes_sub_eq_not","doc":"Subtracting `x` from the all ones bitvector is equivalent to taking its complement "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.allOnes_sub_eq_not\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">allOnes_sub_eq_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\">Std.BitVec.allOnes</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L165-L168","name":"Std.BitVec.add_not_self","line":165,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.add_not_self","doc":"Adding a bitvector to its own complement yields the all ones bitpattern "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.add_not_self\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\">Std.BitVec.allOnes</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L159-L160","name":"Std.BitVec.add_eq_adc","line":159,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.add_eq_adc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.add_eq_adc\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_eq_adc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc\">Std.BitVec.adc</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span>.snd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L140-L157","name":"Std.BitVec.adc_spec","line":140,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc_spec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">adc_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc\">Std.BitVec.adc</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\">Std.BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">c</span></span>,\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">c</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L135-L138","name":"Std.BitVec.getLsb_add","line":135,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.getLsb_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.getLsb_add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i_lt : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.xor\">Bool.xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.xor\">Bool.xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\">Std.BitVec.carry</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L114-L133","name":"Std.BitVec.getLsb_add_add_bool","line":114,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.getLsb_add_add_bool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.getLsb_add_add_bool\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_add_add_bool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i_lt : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">c</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.xor\">Bool.xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.xor\">Bool.xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\">Std.BitVec.carry</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">c</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L103-L112","name":"Std.BitVec.carry_succ","line":103,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry_succ\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">carry_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\">Std.BitVec.carry</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.atLeastTwo\">Std.BitVec.atLeastTwo</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.testBit\">Nat.testBit</a> <span class=\"fn\">x</span> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.testBit\">Nat.testBit</a> <span class=\"fn\">y</span> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\">Std.BitVec.carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L98-L101","name":"Std.BitVec.adc_overflow_limit","line":98,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc_overflow_limit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc_overflow_limit\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">adc_overflow_limit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.toNat\">Bool.toNat</a> <span class=\"fn\">c</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L95-L96","name":"Std.BitVec.adc","line":95,"kind":"def","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc","doc":"Bitwise addition implemented via a ripple carry adder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adc\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">adc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L92-L92","name":"Std.BitVec.adcb","line":92,"kind":"def","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adcb","doc":"Carry function for bitwise addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.adcb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">adcb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L89-L89","name":"Std.BitVec.atLeastTwo","line":89,"kind":"def","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.atLeastTwo","doc":"At least two out of three booleans are true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.atLeastTwo\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">atLeastTwo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L85-L86","name":"Std.BitVec.carry_zero","line":85,"kind":"theorem","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">carry_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\">Std.BitVec.carry</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Bitblast.lean#L83-L83","name":"Std.BitVec.carry","line":83,"kind":"def","docLink":"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry","doc":"carry w x y c returns true if the `w` carry bit is true when computing `x + y + c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Bitblast.html#Std.BitVec.carry\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">carry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}