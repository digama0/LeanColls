{"name":"Std.Data.BitVec.Lemmas","instances":[],"imports":["Init","Std.Data.Bool","Std.Data.BitVec.Basic","Std.Data.Fin.Lemmas","Std.Data.Nat.Lemmas","Std.Tactic.Ext","Std.Tactic.Simpa","Std.Tactic.Omega","Std.Util.ProofWanted"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L540-L545","name":"Std.BitVec.lt_of_le_ne","line":540,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_of_le_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_of_le_ne\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_of_le_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L537-L538","name":"Std.BitVec.ofNat_lt_ofNat","line":537,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_lt_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_lt_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_lt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L535-L536","name":"Std.BitVec.ofFin_lt","line":535,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_lt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofFin_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L533-L534","name":"Std.BitVec.lt_ofFin","line":533,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">y</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L530-L531","name":"Std.BitVec.lt_def","line":530,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L527-L528","name":"Std.BitVec.ofNat_le_ofNat","line":527,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_le_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_le_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_le_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L525-L526","name":"Std.BitVec.ofFin_le","line":525,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_le\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofFin_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L523-L524","name":"Std.BitVec.le_ofFin","line":523,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.le_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.le_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">le_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">y</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L520-L521","name":"Std.BitVec.le_def","line":520,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.le_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L516-L516","name":"Std.BitVec.toFin_mul","line":516,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_mul\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L515-L515","name":"Std.BitVec.toNat_mul","line":515,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_mul\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L513-L513","name":"Std.BitVec.mul_def","line":513,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.mul_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L505-L509","name":"Std.BitVec.add_sub_cancel","line":505,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_sub_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_sub_cancel\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_sub_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L503-L503","name":"Std.BitVec.neg_zero","line":503,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.neg_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.neg_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L499-L501","name":"Std.BitVec.sub_toAdd","line":499,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_toAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_toAdd\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_toAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L496-L497","name":"Std.BitVec.neg_toNat","line":496,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.neg_toNat","doc":"Replaced 2024-02-06. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.neg_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L493-L494","name":"Std.BitVec.toNat_neg","line":493,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_neg\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L486-L491","name":"Std.BitVec.sub_self","line":486,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_self\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L484-L484","name":"Std.BitVec.sub_zero","line":484,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L481-L482","name":"Std.BitVec.ofNat_sub_ofNat","line":481,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_sub_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_sub_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_sub_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span>)</span></span>)</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L479-L480","name":"Std.BitVec.sub_ofFin","line":479,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">y</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L477-L478","name":"Std.BitVec.ofFin_sub","line":477,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_sub\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofFin_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L474-L475","name":"Std.BitVec.sub_toNat","line":474,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_toNat","doc":"Replaced 2024-02-06. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L472-L472","name":"Std.BitVec.toFin_sub","line":472,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_sub\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L470-L471","name":"Std.BitVec.toNat_sub","line":470,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_sub\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L468-L468","name":"Std.BitVec.sub_def","line":468,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.sub_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span>)</span></span>)</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L463-L463","name":"Std.BitVec.zero_add","line":463,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zero_add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L461-L461","name":"Std.BitVec.add_zero","line":461,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L458-L459","name":"Std.BitVec.add_comm","line":458,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_comm\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L455-L456","name":"Std.BitVec.add_assoc","line":455,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_assoc\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L452-L453","name":"Std.BitVec.ofNat_add_ofNat","line":452,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_add_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_add_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_add_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L450-L451","name":"Std.BitVec.add_ofFin","line":450,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">y</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L448-L449","name":"Std.BitVec.ofFin_add","line":448,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofFin_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L447-L447","name":"Std.BitVec.toFin_add","line":447,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L446-L446","name":"Std.BitVec.toNat_add","line":446,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_add","doc":"Definition of bitvector addition as a nat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L441-L441","name":"Std.BitVec.add_def","line":441,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span>)</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L428-L437","name":"Std.BitVec.truncate_succ","line":428,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_succ\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">truncate_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L414-L426","name":"Std.BitVec.getLsb_cons","line":414,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_cons\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> then <span class=\"fn\">b</span> else <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L409-L412","name":"Std.BitVec.toNat_cons","line":409,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cons\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.toNat\">Bool.toNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L400-L405","name":"Std.BitVec.getMsb_rev","line":400,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getMsb_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getMsb_rev\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getMsb_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L394-L398","name":"Std.BitVec.getLsb_rev","line":394,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_rev\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L385-L390","name":"Std.BitVec.getLsb_append","line":385,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_append\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span>)</span></span> then <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">w</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">m</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L381-L383","name":"Std.BitVec.toNat_append","line":381,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_append\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L378-L379","name":"Std.BitVec.append_def","line":378,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.append_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.append_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeftZeroExtend\">Std.BitVec.shiftLeftZeroExtend</a> <span class=\"fn\">x</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'\">Std.BitVec.zeroExtend'</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">w</span></span></span>)</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L372-L374","name":"Std.BitVec.getLsb_ushiftRight","line":372,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ushiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ushiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_ushiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L369-L370","name":"Std.BitVec.toNat_ushiftRight","line":369,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ushiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ushiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ushiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L359-L365","name":"Std.BitVec.getLsb_shiftLeftZeroExtend","line":359,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_shiftLeftZeroExtend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_shiftLeftZeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_shiftLeftZeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeftZeroExtend\">Std.BitVec.shiftLeftZeroExtend</a> <span class=\"fn\">x</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L348-L357","name":"Std.BitVec.shiftLeftZeroExtend_eq","line":348,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.shiftLeftZeroExtend_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.shiftLeftZeroExtend_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftZeroExtend_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeftZeroExtend\">Std.BitVec.shiftLeftZeroExtend</a> <span class=\"fn\">x</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L340-L346","name":"Std.BitVec.getLsb_shiftLeft","line":340,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_shiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span></span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L337-L338","name":"Std.BitVec.toFin_shiftLeft","line":337,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_shiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.ofNat'\">Fin.ofNat'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L333-L335","name":"Std.BitVec.toNat_shiftLeft","line":333,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_shiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L328-L329","name":"Std.BitVec.getLsb_not","line":328,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_not\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L322-L326","name":"Std.BitVec.toFin_not","line":322,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_not\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\"><span class=\"fn\">x</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L303-L320","name":"Std.BitVec.toNat_not","line":303,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_not\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L301-L301","name":"Std.BitVec.not_def","line":301,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.not_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.not_def\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\">Std.BitVec.allOnes</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L294-L297","name":"Std.BitVec.getLsb_xor","line":294,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_xor\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Bool.html#xor\">xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L289-L292","name":"Std.BitVec.toFin_xor","line":289,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_xor\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">y</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L286-L287","name":"Std.BitVec.toNat_xor","line":286,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_xor\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L280-L282","name":"Std.BitVec.getLsb_and","line":280,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_and\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L275-L278","name":"Std.BitVec.toFin_and","line":275,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_and\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L272-L273","name":"Std.BitVec.toNat_and","line":272,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_and\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L266-L268","name":"Std.BitVec.getLsb_or","line":266,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_or\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#or\">||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L260-L263","name":"Std.BitVec.toFin_or","line":260,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_or\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L257-L258","name":"Std.BitVec.toNat_or","line":257,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_or\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L252-L253","name":"Std.BitVec.negOne_eq_allOnes","line":252,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.negOne_eq_allOnes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.negOne_eq_allOnes\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">negOne_eq_allOnes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">1</span>#<span class=\"fn\">w</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\">Std.BitVec.allOnes</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L241-L250","name":"Std.BitVec.getLsb_allOnes","line":241,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_allOnes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_allOnes\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_allOnes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\">Std.BitVec.allOnes</a> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L233-L239","name":"Std.BitVec.toNat_allOnes","line":233,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_allOnes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_allOnes\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_allOnes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\">Std.BitVec.allOnes</a> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L222-L225","name":"Std.BitVec.getLsb_extract","line":222,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_extract\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb\">Std.BitVec.extractLsb</a> <span class=\"fn\">hi</span> <span class=\"fn\">lo</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L219-L220","name":"Std.BitVec.extractLsb_toNat","line":219,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb\">Std.BitVec.extractLsb</a> <span class=\"fn\">hi</span> <span class=\"fn\">lo</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L216-L217","name":"Std.BitVec.extractLsb'_toNat","line":216,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb'_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb'_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb'_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb'\">Std.BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L210-L214","name":"Std.BitVec.extractLsb_ofNat","line":210,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb\">Std.BitVec.extractLsb</a> <span class=\"fn\">hi</span> <span class=\"fn\">lo</span> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span>)</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">lo</span></span>)</span>#<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L206-L207","name":"Std.BitVec.extractLsb_ofFin","line":206,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.extractLsb_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb\">Std.BitVec.extractLsb</a> <span class=\"fn\">hi</span> <span class=\"fn\">lo</span> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">lo</span></span>)</span>#<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L199-L201","name":"Std.BitVec.getLsb_truncate","line":199,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_truncate\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L195-L197","name":"Std.BitVec.getLsb_zeroExtend","line":195,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_zeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L191-L193","name":"Std.BitVec.getLsb_zeroExtend'","line":191,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_zeroExtend'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ge : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'\">Std.BitVec.zeroExtend'</a> <span class=\"fn\">ge</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L188-L189","name":"Std.BitVec.toNat_truncate","line":188,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_truncate\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L186-L186","name":"Std.BitVec.truncate_eq","line":186,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">truncate_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L182-L184","name":"Std.BitVec.zeroExtend_zero","line":182,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L177-L180","name":"Std.BitVec.zeroExtend_eq","line":177,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L167-L175","name":"Std.BitVec.toNat_zeroExtend","line":167,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_zeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L162-L165","name":"Std.BitVec.toNat_zeroExtend'","line":162,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_zeroExtend'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'\">Std.BitVec.zeroExtend'</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L157-L158","name":"Std.BitVec.msb_cast","line":157,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.msb_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.msb_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">msb_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.msb\">Std.BitVec.msb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.msb\">Std.BitVec.msb</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L155-L156","name":"Std.BitVec.getMsb_cast","line":155,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getMsb_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getMsb_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getMsb_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L152-L153","name":"Std.BitVec.getLsb_cast","line":152,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L148-L150","name":"Std.BitVec.toFin_cast","line":148,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">v</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">x</span>.toFin</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L147-L147","name":"Std.BitVec.toNat_cast","line":147,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L133-L143","name":"Std.BitVec.msb_eq_decide","line":133,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.msb_eq_decide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.msb_eq_decide\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">msb_eq_decide</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">w</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.msb\">Std.BitVec.msb</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L119-L128","name":"Std.BitVec.ofNat_toNat","line":119,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span>#<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L113-L114","name":"Std.BitVec.toNat_mod_cancel","line":113,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_mod_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_mod_cancel\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_mod_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L111-L111","name":"Std.BitVec.toNat_zero","line":111,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L107-L109","name":"Std.BitVec.getLsb_ofNat","line":107,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.testBit\">Nat.testBit</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L105-L105","name":"Std.BitVec.toFin_ofNat","line":105,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toFin_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">w</span></span>)</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.ofNat'\">Fin.ofNat'</a> <span class=\"fn\">x</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L102-L103","name":"Std.BitVec.toNat_ofNat","line":102,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">w</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L100-L100","name":"Std.BitVec.toNat_ofFin","line":100,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L97-L98","name":"Std.BitVec.ofBool_eq_iff_eq","line":97,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofBool_eq_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofBool_eq_iff_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_eq_iff_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b' : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">b'</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L94-L95","name":"Std.BitVec.ofNat_one","line":94,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_one\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>#<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L91-L92","name":"Std.BitVec.toNat_ofBool","line":91,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofBool\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ofBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.toNat\">Bool.toNat</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L88-L89","name":"Std.BitVec.eq_of_toFin_eq","line":88,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_toFin_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_toFin_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_toFin_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.toFin</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.toFin</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L69-L86","name":"Std.BitVec.eq_of_getMsb_eq","line":69,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getMsb_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getMsb_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_getMsb_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">y</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L58-L67","name":"Std.BitVec.eq_of_getLsb_eq","line":58,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getLsb_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getLsb_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_getLsb_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L50-L54","name":"Std.BitVec.lt_of_getLsb","line":50,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_of_getLsb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.lt_of_getLsb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_of_getLsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L43-L48","name":"Std.BitVec.getLsb_ge","line":43,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ge\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ge : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L40-L41","name":"Std.BitVec.getLsb_ofFin","line":40,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.testBit\">Nat.testBit</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L38-L38","name":"Std.BitVec.testBit_toNat","line":38,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.testBit_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.testBit_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">testBit_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.testBit\">Nat.testBit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L36-L36","name":"Std.BitVec.toNat_lt","line":36,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_lt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L33-L34","name":"Std.BitVec.toNat_eq","line":33,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L31-L31","name":"Std.BitVec.val_toFin","line":31,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.val_toFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.val_toFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">val_toFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.toFin</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L28-L29","name":"Std.BitVec.zero_is_unique","line":28,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zero_is_unique","doc":"Replaced 2024-02-07. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zero_is_unique\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_is_unique</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.nil\">Std.BitVec.nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L25-L26","name":"Std.BitVec.eq_of_toNat_eq","line":25,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_toNat_eq","doc":"Prove equality of bitvectors in terms of nat operations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_toNat_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_toNat_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">j</span></span></span> → <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/BitVec/Lemmas.lean#L21-L22","name":"Std.BitVec.ofFin_eq_ofNat","line":21,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_eq_ofNat","doc":"This normalized a bitvec using `ofFin` to `ofNat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofFin_eq_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofFin_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lt : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">x</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">lt</span> }</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">w</span></span></span></div></div>"}]}