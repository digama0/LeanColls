{"name":"LeanColls.Classes.Bag","instances":[],"imports":["Init","Mathlib.Data.Finset.Basic","Mathlib.Data.Multiset.Basic","LeanColls.Classes.Ops"],"declarations":[{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L48-L48","name":"LeanColls.MultiBag.mk","line":48,"kind":"ctor","docLink":"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toReadOnly : <span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\">LeanColls.MultiBag.ReadOnly</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toInsert : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag\">LeanColls.MultiBag</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L48-L50","name":"LeanColls.MultiBag","line":48,"kind":"class","docLink":"./LeanColls/Classes/Bag.html#LeanColls.MultiBag","doc":"[MultiBag] includes operations expected on most \"multiset-like\" collections "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span>.<span class=\"name\">ReadOnly</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u (u_1 + 1)) v)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L41-L41","name":"LeanColls.MultiBag.ReadOnly.mk","line":41,"kind":"ctor","docLink":"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span>.<span class=\"name\">ReadOnly</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMembership : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToMultiset : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toFold : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSize : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\">LeanColls.Size</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\">LeanColls.MultiBag.ReadOnly</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L41-L45","name":"LeanColls.MultiBag.ReadOnly","line":41,"kind":"class","docLink":"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly","doc":"[MultiBag] operations expected on read-only \"multiset-like\" collections "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span>.<span class=\"name\">ReadOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/Prelude.html#Membership\"><span class=\"name\">Membership</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToMultiset</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u (u_1 + 1)) v)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L36-L36","name":"LeanColls.Bag.mk","line":36,"kind":"ctor","docLink":"./LeanColls/Classes/Bag.html#LeanColls.Bag.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Bag</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toReadOnly : <span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly\">LeanColls.Bag.ReadOnly</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toInsert : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag\">LeanColls.Bag</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L36-L38","name":"LeanColls.Bag","line":36,"kind":"class","docLink":"./LeanColls/Classes/Bag.html#LeanColls.Bag","doc":"[Bag] includes operations expected on most \"set-like\" collections. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Bag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Bag</span>.<span class=\"name\">ReadOnly</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u (u_1 + 1)) v)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L29-L29","name":"LeanColls.Bag.ReadOnly.mk","line":29,"kind":"ctor","docLink":"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Bag</span>.<span class=\"name\">ReadOnly</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMembership : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToFinset : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toFold : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSize : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\">LeanColls.Size</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly\">LeanColls.Bag.ReadOnly</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Bag.lean#L29-L33","name":"LeanColls.Bag.ReadOnly","line":29,"kind":"class","docLink":"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly","doc":"[Bag] operations expected on read-only \"set-like\" collections. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Bag</span>.<span class=\"name\">ReadOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/Prelude.html#Membership\"><span class=\"name\">Membership</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToFinset</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u (u_1 + 1)) v)</div></div>"}]}