{"name":"Std.Tactic.Omega.IntList","instances":[{"typeNames":["IntList"],"name":"IntList.instAddIntList","className":"Add"},{"typeNames":["IntList"],"name":"IntList.instMulIntList","className":"Mul"},{"typeNames":["IntList"],"name":"IntList.instNegIntList","className":"Neg"},{"typeNames":["IntList"],"name":"IntList.instSubIntList","className":"Sub"},{"typeNames":["Int","IntList","IntList"],"name":"IntList.instHMulIntIntList","className":"HMul"}],"imports":["Init","Std.Data.List.Init.Lemmas","Std.Data.Nat.Init.Gcd","Std.Data.Int.Init.DivMod","Std.Data.Option.Init.Lemmas","Std.Tactic.Replace","Std.Tactic.Simpa"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L392-L410","name":"IntList.dvd_bmod_dot_sub_dot_bmod","line":392,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dvd_bmod_dot_sub_dot_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dvd_bmod_dot_sub_dot_bmod\"><span class=\"name\">IntList</span>.<span class=\"name\">dvd_bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod_dot_sub_dot_bmod\">IntList.bmod_dot_sub_dot_bmod</a> <span class=\"fn\">m</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L389-L390","name":"IntList.bmod_dot_sub_dot_bmod","line":389,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.bmod_dot_sub_dot_bmod","doc":"The difference between the balanced mod of a dot product,\nand the dot product with balanced mod applied to each entry of the left factor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod_dot_sub_dot_bmod\"><span class=\"name\">IntList</span>.<span class=\"name\">bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L382-L383","name":"IntList.bmod_length","line":382,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.bmod_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod_length\"><span class=\"name\">IntList</span>.<span class=\"name\">bmod_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod\">IntList.bmod</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L380-L380","name":"IntList.bmod","line":380,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.bmod","doc":"Apply \"balanced mod\" to each entry in an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod\"><span class=\"name\">IntList</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L366-L377","name":"IntList.dot_sdiv_left","line":366,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_sdiv_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_sdiv_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_sdiv_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">d</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L356-L364","name":"IntList.dot_eq_zero_of_left_eq_zero","line":356,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_eq_zero_of_left_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_eq_zero_of_left_eq_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_eq_zero_of_left_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L352-L353","name":"IntList.gcd_dvd_dot_left","line":352,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd_dot_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd_dot_left\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd_dot_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L340-L350","name":"IntList.dot_mod_gcd_left","line":340,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_mod_gcd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_mod_gcd_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_mod_gcd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L337-L338","name":"IntList.gcd_eq_zero","line":337,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L321-L333","name":"IntList.gcd_eq_iff","line":321,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_iff\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">g</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L306-L319","name":"IntList.dvd_gcd","line":306,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dvd_gcd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dvd_gcd\"><span class=\"name\">IntList</span>.<span class=\"name\">dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L296-L304","name":"IntList.gcd_dvd","line":296,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L292-L294","name":"IntList.gcd_cons_div_right'","line":292,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right'\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L288-L290","name":"IntList.gcd_cons_div_right","line":288,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L284-L286","name":"IntList.gcd_cons_div_left","line":284,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_left\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L282-L282","name":"IntList.gcd_cons","line":282,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L281-L281","name":"IntList.gcd_nil","line":281,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L279-L279","name":"IntList.gcd","line":279,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd","doc":"The gcd of the absolute values of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L276-L276","name":"IntList.sdiv_cons","line":276,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L275-L275","name":"IntList.sdiv_nil","line":275,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">[]</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L273-L273","name":"IntList.sdiv","line":273,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv","doc":"Division of an `IntList` by a integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L259-L270","name":"IntList.dot_of_left_zero","line":259,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_of_left_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_of_left_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_of_left_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L256-L257","name":"IntList.dot_smul_left","line":256,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_smul_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_smul_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L253-L254","name":"IntList.dot_neg_left","line":253,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_neg_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L250-L251","name":"IntList.dot_distrib_left","line":250,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_distrib_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">ys</span> <span class=\"fn\">zs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L230-L248","name":"IntList.dot_set_left","line":230,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_set_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_set_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_set_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L225-L225","name":"IntList.dot_cons₂","line":225,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_cons₂\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L224-L224","name":"IntList.dot_nil_right","line":224,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_right\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L223-L223","name":"IntList.dot_nil_left","line":223,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">[]</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L218-L218","name":"IntList.dot","line":218,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot","doc":"The dot product of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\"><span class=\"name\">IntList</span>.<span class=\"name\">dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L212-L215","name":"IntList.sum_smul","line":212,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_smul\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L206-L209","name":"IntList.sum_neg","line":206,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L197-L203","name":"IntList.sum_add","line":197,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_add\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L194-L194","name":"IntList.sum_cons","line":194,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L193-L193","name":"IntList.sum_nil","line":193,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L191-L191","name":"IntList.sum","line":191,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum","doc":"The sum of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\"><span class=\"name\">IntList</span>.<span class=\"name\">sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L182-L188","name":"IntList.mul_smul_left","line":182,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_smul_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L174-L180","name":"IntList.sub_eq_add_neg","line":174,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub_eq_add_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L165-L171","name":"IntList.mul_neg_left","line":165,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_neg_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L148-L163","name":"IntList.mul_distrib_left","line":148,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_distrib_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L137-L145","name":"IntList.combo_eq_smul_add_smul","line":137,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.combo_eq_smul_add_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.combo_eq_smul_add_smul\"><span class=\"name\">IntList</span>.<span class=\"name\">combo_eq_smul_add_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.combo\">IntList.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L134-L135","name":"IntList.combo","line":134,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.combo","doc":"A linear combination of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.combo\"><span class=\"name\">IntList</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L131-L131","name":"IntList.smul_cons","line":131,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L130-L130","name":"IntList.smul_nil","line":130,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L126-L128","name":"IntList.smul_get","line":126,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_get\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L124-L124","name":"IntList.smul_def","line":124,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_def\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L121-L122","name":"IntList.instHMulIntIntList","line":121,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instHMulIntIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instHMulIntIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instHMulIntIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L118-L119","name":"IntList.smul","line":118,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul","doc":"Implementation of scalar multiplication by an integer on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul\"><span class=\"name\">IntList</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L113-L115","name":"IntList.sub_def","line":113,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub_def\"><span class=\"name\">IntList</span>.<span class=\"name\">sub_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L111-L111","name":"IntList.instSubIntList","line":111,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instSubIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instSubIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instSubIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L108-L109","name":"IntList.sub","line":108,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub","doc":"Implementation of subtraction on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub\"><span class=\"name\">IntList</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L105-L105","name":"IntList.neg_cons","line":105,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L104-L104","name":"IntList.neg_nil","line":104,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L100-L102","name":"IntList.neg_get","line":100,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_get\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L98-L98","name":"IntList.neg_def","line":98,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_def\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L96-L96","name":"IntList.instNegIntList","line":96,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instNegIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instNegIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instNegIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L94-L94","name":"IntList.neg","line":94,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg","doc":"Implementation of negation on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg\"><span class=\"name\">IntList</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L91-L91","name":"IntList.mul_cons₂","line":91,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_cons₂\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L90-L90","name":"IntList.mul_nil_right","line":90,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_right\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L89-L89","name":"IntList.mul_nil_left","line":89,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L85-L87","name":"IntList.mul_get","line":85,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_get\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L82-L83","name":"IntList.mul_def","line":82,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_def\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L80-L80","name":"IntList.instMulIntList","line":80,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instMulIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instMulIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instMulIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L78-L78","name":"IntList.mul","line":78,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul","doc":"Implementation of `*` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul\"><span class=\"name\">IntList</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L74-L75","name":"IntList.cons_add_cons","line":74,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.cons_add_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.cons_add_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">cons_add_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L73-L73","name":"IntList.nil_add","line":73,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.nil_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.nil_add\"><span class=\"name\">IntList</span>.<span class=\"name\">nil_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L72-L72","name":"IntList.add_nil","line":72,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">add_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L68-L70","name":"IntList.add_get","line":68,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add_get\"><span class=\"name\">IntList</span>.<span class=\"name\">add_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L64-L66","name":"IntList.add_def","line":64,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add_def\"><span class=\"name\">IntList</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L62-L62","name":"IntList.instAddIntList","line":62,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instAddIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instAddIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instAddIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L59-L60","name":"IntList.add","line":59,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add","doc":"Implementation of `+` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add\"><span class=\"name\">IntList</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L56-L56","name":"IntList.leading","line":56,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leading","doc":"Returns the leading coefficient, i.e. the first non-zero entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leading\"><span class=\"name\">IntList</span>.<span class=\"name\">leading</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L53-L53","name":"IntList.set_cons_succ","line":53,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_cons_succ\"><span class=\"name\">IntList</span>.<span class=\"name\">set_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L52-L52","name":"IntList.set_cons_zero","line":52,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_cons_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">set_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L51-L51","name":"IntList.set_nil_succ","line":51,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_nil_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_nil_succ\"><span class=\"name\">IntList</span>.<span class=\"name\">set_nil_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">[]</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L50-L50","name":"IntList.set_nil_zero","line":50,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_nil_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_nil_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">set_nil_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">[]</span> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">y</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L43-L48","name":"IntList.set","line":43,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set","doc":"Like `List.set`, but right-pad with zeroes as necessary first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set\"><span class=\"name\">IntList</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L34-L36","name":"IntList.get_of_length_le","line":34,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_of_length_le\"><span class=\"name\">IntList</span>.<span class=\"name\">get_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L30-L32","name":"IntList.get_map","line":30,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_map\"><span class=\"name\">IntList</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L28-L28","name":"IntList.get_cons_succ","line":28,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_cons_succ\"><span class=\"name\">IntList</span>.<span class=\"name\">get_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L27-L27","name":"IntList.get_cons_zero","line":27,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_cons_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">get_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L26-L26","name":"IntList.get_nil","line":26,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">get_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">[]</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L24-L24","name":"IntList.get","line":24,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get","doc":"Get the `i`-th element (interpreted as `0` if the list is not long enough). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get\"><span class=\"name\">IntList</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Tactic/Omega/IntList.lean#L19-L19","name":"IntList","line":19,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList","doc":"A type synonym for `List Int`, used by `omega` for dense representation of coefficients.\n\nWe define algebraic operations,\ninterpreting `List Int` as a finitely supported function `Nat → Int`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList\"><span class=\"name\">IntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}