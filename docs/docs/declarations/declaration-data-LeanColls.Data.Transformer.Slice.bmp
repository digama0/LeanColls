{"name":"LeanColls.Data.Transformer.Slice","instances":[{"typeNames":["LeanColls.Indexed.WithIdx","Prod"],"name":"LeanColls.Slice.instReadOnlyWithIdxSliceProd","className":"LeanColls.MultiBag.ReadOnly"},{"typeNames":["LeanColls.Slice"],"name":"LeanColls.Slice.instIndexedSlice","className":"LeanColls.Indexed"}],"imports":["Init","LeanColls.Classes.Indexed.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L37-L61","name":"LeanColls.Slice.instIndexedSlice","line":37,"kind":"instance","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.instIndexedSlice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.instIndexedSlice\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instIndexedSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/IndexType/Basic.html#LeanColls.IndexType\">LeanColls.IndexType</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">ι'</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L25-L35","name":"LeanColls.Slice.instReadOnlyWithIdxSliceProd","line":25,"kind":"instance","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.instReadOnlyWithIdxSliceProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.instReadOnlyWithIdxSliceProd\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instReadOnlyWithIdxSliceProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/IndexType/Basic.html#LeanColls.IndexType\">LeanColls.IndexType</a> <span class=\"fn\">ι'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\">LeanColls.MultiBag.ReadOnly</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\">LeanColls.Indexed.WithIdx</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L22-L23","name":"LeanColls.Slice.set","line":22,"kind":"def","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(slice : <span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i' : <span class=\"fn\">ι'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L19-L20","name":"LeanColls.Slice.update","line":19,"kind":"def","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(slice : <span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i' : <span class=\"fn\">ι'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L16-L17","name":"LeanColls.Slice.get","line":16,"kind":"def","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.get\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(slice : <span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">τ</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L12-L12","name":"LeanColls.Slice.data","line":12,"kind":"def","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.data\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L11-L11","name":"LeanColls.Slice.mk","line":11,"kind":"ctor","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(data : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\">LeanColls.Slice</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span> <span class=\"fn\">ι'</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Data/Transformer/Slice.lean#L11-L12","name":"LeanColls.Slice","line":11,"kind":"structure","docLink":"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice","doc":"An indexed collection can be restricted to some \"smaller\" domain "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Data/Transformer/Slice.html#LeanColls.Slice\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Slice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι' : <a href=\"./foundational_types.html\">Sort</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι'</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}