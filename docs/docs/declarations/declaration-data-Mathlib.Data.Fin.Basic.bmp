{"name":"Mathlib.Data.Fin.Basic","instances":[{"typeNames":["Nat","Fin","Fin.val"],"name":"Fin.instCanLiftNatFinValLtInstLTNat","className":"CanLift"},{"typeNames":["Fin"],"name":"Fin.instLinearOrderFin","className":"LinearOrder"},{"typeNames":["Fin"],"name":"Fin.instPartialOrderFin","className":"PartialOrder"},{"typeNames":["Fin"],"name":"Fin.Lt.isWellOrder","className":"IsWellOrder"},{"typeNames":["Fin"],"name":"Fin.instWellFoundedRelationFin","className":"WellFoundedRelation"},{"typeNames":["Fin"],"name":"Fin.instZeroFin","className":"Zero"},{"typeNames":["Fin"],"name":"Fin.instOneFin","className":"One"},{"typeNames":["Fin"],"name":"Fin.instBoundedOrderFinHAddNatInstHAddInstAddNatOfNatInstLEFin","className":"BoundedOrder"},{"typeNames":["Fin"],"name":"Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat","className":"Lattice"},{"typeNames":["OrderIso"],"name":"Fin.orderIso_subsingleton","className":"Subsingleton"},{"typeNames":["OrderIso"],"name":"Fin.orderIso_subsingleton'","className":"Subsingleton"},{"typeNames":["OrderIso"],"name":"Fin.orderIsoUnique","className":"Unique"},{"typeNames":["Fin"],"name":"Fin.nontrivial","className":"Nontrivial"},{"typeNames":["Fin"],"name":"Fin.addCommSemigroup","className":"AddCommSemigroup"},{"typeNames":["Fin"],"name":"Fin.instOfNatFin","className":"OfNat"},{"typeNames":["Fin"],"name":"Fin.inhabited","className":"Inhabited"},{"typeNames":["Fin"],"name":"Fin.inhabitedFinOneAdd","className":"Inhabited"},{"typeNames":["Fin"],"name":"Fin.instAddCommSemigroupFin","className":"AddCommSemigroup"},{"typeNames":["Fin"],"name":"Fin.addCommMonoid","className":"AddCommMonoid"},{"typeNames":["Fin"],"name":"Fin.instAddMonoidWithOne","className":"AddMonoidWithOne"},{"typeNames":["Fin"],"name":"Fin.neg","className":"Neg"},{"typeNames":["Fin"],"name":"Fin.addCommGroup","className":"AddCommGroup"},{"typeNames":["Fin"],"name":"Fin.instInvolutiveNeg","className":"InvolutiveNeg"},{"typeNames":["Fin"],"name":"Fin.instIsCancelAdd","className":"IsCancelAdd"},{"typeNames":["Fin"],"name":"Fin.instAddLeftCancelSemigroup","className":"AddLeftCancelSemigroup"},{"typeNames":["Fin"],"name":"Fin.instAddRightCancelSemigroup","className":"AddRightCancelSemigroup"},{"typeNames":["Fin"],"name":"Fin.uniqueFinOne","className":"Unique"},{"typeNames":["Fin"],"name":"Fin.toExpr","className":"Lean.ToExpr"}],"imports":["Init","Mathlib.Algebra.NeZero","Mathlib.Init.Data.Fin.Basic","Mathlib.Order.RelIso.Basic","Mathlib.Data.Nat.Order.Basic","Mathlib.Order.Hom.Set","Std.Data.Fin.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1697-L1704","name":"Fin.toExpr","line":1697,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.toExpr\"><span class=\"name\">Fin</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1690-L1691","name":"Fin.zero_mul'","line":1690,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.zero_mul'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.zero_mul'\"><span class=\"name\">Fin</span>.<span class=\"name\">zero_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1687-L1687","name":"Fin.mul_zero'","line":1687,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.mul_zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.mul_zero'\"><span class=\"name\">Fin</span>.<span class=\"name\">mul_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1683-L1684","name":"Fin.one_mul'","line":1683,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.one_mul'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.one_mul'\"><span class=\"name\">Fin</span>.<span class=\"name\">one_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1673-L1678","name":"Fin.mul_one'","line":1673,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.mul_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.mul_one'\"><span class=\"name\">Fin</span>.<span class=\"name\">mul_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1659-L1661","name":"Fin.coe_ofNat_eq_mod","line":1659,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_ofNat_eq_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_ofNat_eq_mod\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_ofNat_eq_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1650-L1652","name":"Fin.pos_of_ne_zero","line":1650,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pos_of_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pos_of_ne_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">pos_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1647-L1648","name":"Fin.neg_nat_cast_eq_one","line":1647,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.neg_nat_cast_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.neg_nat_cast_eq_one\"><span class=\"name\">Fin</span>.<span class=\"name\">neg_nat_cast_eq_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1645-L1645","name":"Fin.neg_last","line":1645,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.neg_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.neg_last\"><span class=\"name\">Fin</span>.<span class=\"name\">neg_last</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1628-L1642","name":"Fin.exists_eq_add_of_lt","line":1628,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.exists_eq_add_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.exists_eq_add_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">exists_eq_add_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ k &lt; <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1622-L1626","name":"Fin.exists_eq_add_of_le","line":1622,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.exists_eq_add_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.exists_eq_add_of_le\"><span class=\"name\">Fin</span>.<span class=\"name\">exists_eq_add_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ k ≤ <span class=\"fn\">b</span>, <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1611-L1620","name":"Fin.add_one_le_of_lt","line":1611,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.add_one_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.add_one_le_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">add_one_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1607-L1608","name":"Fin.last_sub","line":1607,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.last_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.last_sub\"><span class=\"name\">Fin</span>.<span class=\"name\">last_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1603-L1604","name":"Fin.sub_one_lt_iff","line":1603,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.sub_one_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.sub_one_lt_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">sub_one_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1594-L1599","name":"Fin.le_sub_one_iff","line":1594,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_sub_one_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_sub_one_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">le_sub_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1583-L1590","name":"Fin.lt_sub_one_iff","line":1583,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_sub_one_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_sub_one_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_sub_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1569-L1577","name":"Fin.coe_sub_one","line":1569,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_sub_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_sub_one\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_sub_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">n</span> else <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1562-L1566","name":"Fin.coe_neg_one","line":1562,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_neg_one\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1558-L1559","name":"Fin.eq_one_of_neq_zero","line":1558,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.eq_one_of_neq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.eq_one_of_neq_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">eq_one_of_neq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1555-L1555","name":"Fin.coe_fin_one","line":1555,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_fin_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_fin_one\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_fin_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1551-L1552","name":"Fin.uniqueFinOne","line":1551,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.uniqueFinOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.uniqueFinOne\"><span class=\"name\">Fin</span>.<span class=\"name\">uniqueFinOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1548-L1548","name":"Fin.eq_zero","line":1548,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.eq_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1542-L1543","name":"Fin.coe_neg","line":1542,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_neg\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1538-L1539","name":"Fin.instAddRightCancelSemigroup","line":1538,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instAddRightCancelSemigroup","doc":"Note this is more general than `Fin.addCommGroup` as it applies (vacuously) to `Fin 0` too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instAddRightCancelSemigroup\"><span class=\"name\">Fin</span>.<span class=\"name\">instAddRightCancelSemigroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddRightCancelSemigroup\">AddRightCancelSemigroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1533-L1534","name":"Fin.instAddLeftCancelSemigroup","line":1533,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instAddLeftCancelSemigroup","doc":"Note this is more general than `Fin.addCommGroup` as it applies (vacuously) to `Fin 0` too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instAddLeftCancelSemigroup\"><span class=\"name\">Fin</span>.<span class=\"name\">instAddLeftCancelSemigroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddLeftCancelSemigroup\">AddLeftCancelSemigroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1527-L1529","name":"Fin.instIsCancelAdd","line":1527,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instIsCancelAdd","doc":"Note this is more general than `Fin.addCommGroup` as it applies (vacuously) to `Fin 0` too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instIsCancelAdd\"><span class=\"name\">Fin</span>.<span class=\"name\">instIsCancelAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelAdd\">IsCancelAdd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1521-L1523","name":"Fin.instInvolutiveNeg","line":1521,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instInvolutiveNeg","doc":"Note this is more general than `Fin.addCommGroup` as it applies (vacuously) to `Fin 0` too. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instInvolutiveNeg\"><span class=\"name\">Fin</span>.<span class=\"name\">instInvolutiveNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvolutiveNeg\">InvolutiveNeg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1510-L1518","name":"Fin.addCommGroup","line":1510,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.addCommGroup","doc":"Abelian group structure on `Fin n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.addCommGroup\"><span class=\"name\">Fin</span>.<span class=\"name\">addCommGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1506-L1507","name":"Fin.neg","line":1506,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.neg","doc":"Negation on `Fin n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.neg\"><span class=\"name\">Fin</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1496-L1498","name":"Fin.antitone_iff_succ_le","line":1496,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.antitone_iff_succ_le","doc":"A function `f` on `Fin (n + 1)` is antitone if and only if `f (i + 1) ≤ f i` for all `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.antitone_iff_succ_le\"><span class=\"name\">Fin</span>.<span class=\"name\">antitone_iff_succ_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Antitone\">Antitone</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1490-L1492","name":"Fin.strictAnti_iff_succ_lt","line":1490,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictAnti_iff_succ_lt","doc":"A function `f` on `Fin (n + 1)` is strictly antitone if and only if `f (i + 1) < f i`\nfor all `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictAnti_iff_succ_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">strictAnti_iff_succ_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictAnti\">StrictAnti</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1483-L1485","name":"Fin.monotone_iff_le_succ","line":1483,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.monotone_iff_le_succ","doc":"A function `f` on `Fin (n + 1)` is monotone if and only if `f i ≤ f (i + 1)` for all `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.monotone_iff_le_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">monotone_iff_le_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1477-L1479","name":"Fin.strictMono_iff_lt_succ","line":1477,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_iff_lt_succ","doc":"A function `f` on `Fin (n + 1)` is strictly monotone if and only if `f i < f (i + 1)`\nfor all `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_iff_lt_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_iff_lt_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1462-L1472","name":"Fin.liftFun_iff_succ","line":1462,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.liftFun_iff_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.liftFun_iff_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">liftFun_iff_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrans\">IsTrans</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">⇒</a> <span class=\"fn\">r</span></a>)</a> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1408-L1419","name":"Fin.modNat_rev","line":1408,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.modNat_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.modNat_rev\"><span class=\"name\">Fin</span>.<span class=\"name\">modNat_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.modNat\">Fin.modNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.modNat\">Fin.modNat</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1404-L1405","name":"Fin.coe_modNat","line":1404,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_modNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_modNat\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_modNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.modNat\">Fin.modNat</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1399-L1400","name":"Fin.modNat","line":1399,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.modNat","doc":"Compute `i % n`, where `n` is a `Nat` and inferred the type of `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.modNat\"><span class=\"name\">Fin</span>.<span class=\"name\">modNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1394-L1395","name":"Fin.coe_divNat","line":1394,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_divNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_divNat\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_divNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.divNat\">Fin.divNat</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1389-L1390","name":"Fin.divNat","line":1389,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.divNat","doc":"Compute `i / n`, where `n` is a `Nat` and inferred the type of `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.divNat\"><span class=\"name\">Fin</span>.<span class=\"name\">divNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1381-L1382","name":"Fin.pred_lt_castPred","line":1381,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_lt_castPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_lt_castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_lt_castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">h₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1377-L1379","name":"Fin.pred_lt_castPred_iff","line":1377,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_lt_castPred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_lt_castPred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_lt_castPred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1373-L1375","name":"Fin.castPred_le_pred_iff","line":1373,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_le_pred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_le_pred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_le_pred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1370-L1371","name":"Fin.lt_succ_castPred","line":1370,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_succ_castPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_succ_castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_succ_castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1366-L1368","name":"Fin.lt_succ_castPred_iff","line":1366,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_succ_castPred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_succ_castPred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_succ_castPred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1362-L1364","name":"Fin.succ_castPred_le_iff","line":1362,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_castPred_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_castPred_le_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_castPred_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1359-L1360","name":"Fin.lt_castPred_succ","line":1359,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_castPred_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_castPred_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_castPred_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1355-L1357","name":"Fin.lt_castPred_succ_iff","line":1355,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_castPred_succ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_castPred_succ_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_castPred_succ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1351-L1353","name":"Fin.castpred_succ_le_iff","line":1351,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castpred_succ_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castpred_succ_le_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castpred_succ_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1345-L1349","name":"Fin.succ_castPred_eq_add_one","line":1345,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_castPred_eq_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_castPred_eq_add_one\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_castPred_eq_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1341-L1343","name":"Fin.succ_castPred_eq_castPred_succ","line":1341,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_castPred_eq_castPred_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_castPred_eq_castPred_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_castPred_eq_castPred_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha' : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1337-L1339","name":"Fin.rev_castPred","line":1337,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_castPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1333-L1335","name":"Fin.rev_pred","line":1333,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_pred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_pred\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>) (<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">a</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">a</span></span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1327-L1330","name":"Fin.castPred_one","line":1327,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_one\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">1</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1322-L1323","name":"Fin.castPred_zero","line":1322,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1319-L1320","name":"Fin.castPred_zero'","line":1319,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_zero'\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1315-L1317","name":"Fin.castPred_inj","line":1315,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_inj\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hj : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">j</span> <span class=\"fn\">hj</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1311-L1313","name":"Fin.le_castPred_iff","line":1311,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_castPred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_castPred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">le_castPred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1307-L1309","name":"Fin.castPred_le_iff","line":1307,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_le_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1303-L1305","name":"Fin.lt_castPred_iff","line":1303,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_castPred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_castPred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_castPred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1299-L1301","name":"Fin.castPred_lt_iff","line":1299,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_lt_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1295-L1297","name":"Fin.monotone_castPred_comp","line":1295,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.monotone_castPred_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.monotone_castPred_comp\"><span class=\"name\">Fin</span>.<span class=\"name\">monotone_castPred_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf₂ : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1291-L1293","name":"Fin.strictMono_castPred_comp","line":1291,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castPred_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castPred_comp\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_castPred_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf₂ : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1288-L1289","name":"Fin.castPred_lt_castPred_iff","line":1288,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_lt_castPred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_lt_castPred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_lt_castPred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hj : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">j</span> <span class=\"fn\">hj</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1285-L1286","name":"Fin.castPred_le_castPred_iff","line":1285,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_le_castPred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_le_castPred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_le_castPred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hj : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">j</span> <span class=\"fn\">hj</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1280-L1282","name":"Fin.castPred_mk","line":1280,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_mk\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h₂</span> }</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h₂</span> }</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h₂</span> }</span> <span class=\"fn\">h₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h₁</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1275-L1277","name":"Fin.castPred_eq_iff_eq_castSucc","line":1275,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_eq_iff_eq_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_eq_iff_eq_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_eq_iff_eq_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1269-L1272","name":"Fin.castSucc_castPred","line":1269,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_castPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1264-L1265","name":"Fin.castPred_castSucc","line":1264,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1260-L1260","name":"Fin.coe_castPred","line":1260,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_castPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1256-L1257","name":"Fin.castLT_eq_castPred","line":1256,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLT_eq_castPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLT_eq_castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">castLT_eq_castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLT\">Fin.castLT</a> <span class=\"fn\">i</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\">Fin.castPred</a> <span class=\"fn\">i</span> <span class=\"fn\">h'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1252-L1252","name":"Fin.castPred","line":1252,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castPred","doc":"`castPred i` sends `i : Fin (n + 1)` to `Fin n` as long as i ≠ last n. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castPred\"><span class=\"name\">Fin</span>.<span class=\"name\">castPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1244-L1245","name":"Fin.castSucc_pred_lt","line":1244,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_pred_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1240-L1242","name":"Fin.castSucc_pred_lt_iff","line":1240,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_lt_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_pred_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1236-L1238","name":"Fin.le_castSucc_pred_iff","line":1236,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_castSucc_pred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_castSucc_pred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">le_castSucc_pred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1233-L1234","name":"Fin.pred_castSucc_lt","line":1233,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_castSucc_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_castSucc_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_castSucc_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1229-L1231","name":"Fin.pred_castSucc_lt_iff","line":1229,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_castSucc_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_castSucc_lt_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_castSucc_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1225-L1227","name":"Fin.le_pred_castSucc_iff","line":1225,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_pred_castSucc_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_pred_castSucc_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">le_pred_castSucc_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1219-L1223","name":"Fin.castSucc_pred_add_one_eq","line":1219,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_add_one_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_add_one_eq\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_pred_add_one_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1214-L1216","name":"Fin.castSucc_pred_eq_pred_castSucc","line":1214,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_eq_pred_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pred_eq_pred_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_pred_eq_pred_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha' : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">ha'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1211-L1212","name":"Fin.le_pred_iff","line":1211,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_pred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_pred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">le_pred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1209-L1210","name":"Fin.pred_le_iff","line":1209,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_le_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1207-L1208","name":"Fin.lt_pred_iff","line":1207,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_pred_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_pred_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_pred_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1205-L1206","name":"Fin.pred_lt_iff","line":1205,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_lt_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1202-L1203","name":"Fin.pred_last","line":1202,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_last\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1198-L1200","name":"Fin.pred_one'","line":1198,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pred_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pred_one'\"><span class=\"name\">Fin</span>.<span class=\"name\">pred_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">1</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1192-L1194","name":"Fin.monotone_pred_comp","line":1192,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.monotone_pred_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.monotone_pred_comp\"><span class=\"name\">Fin</span>.<span class=\"name\">monotone_pred_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf₂ : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1188-L1190","name":"Fin.strictMono_pred_comp","line":1188,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_pred_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_pred_comp\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_pred_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf₂ : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.pred\">Fin.pred</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1131-L1132","name":"Fin.natAddEmb","line":1131,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb","doc":"`Fin.natAdd` as an `OrderEmbedding`, `natAddEmb n i` adds `n` to `i` \"on the left\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">natAddEmb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1130-L1130","name":"Fin.natAddEmb_toEmbedding","line":1130,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb_toEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb_toEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">natAddEmb_toEmbedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb\">Fin.natAddEmb</a> <span class=\"fn\">n</span></span>)</span>.toEmbedding</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">inj'</span> := <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">n</span> <span class=\"fn\">x_1</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1130-L1130","name":"Fin.natAddEmb_apply","line":1130,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">natAddEmb_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.natAddEmb\">Fin.natAddEmb</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">n</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1126-L1127","name":"Fin.strictMono_natAdd","line":1126,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_natAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_natAdd\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_natAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1109-L1110","name":"Fin.addNatEmb","line":1109,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb","doc":"`Fin.addNat` as an `OrderEmbedding`, `addNatEmb m i` adds `m` to `i`, generalizes\n`Fin.succ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">addNatEmb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1108-L1108","name":"Fin.addNatEmb_toEmbedding","line":1108,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb_toEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb_toEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">addNatEmb_toEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb\">Fin.addNatEmb</a> <span class=\"fn\">m</span></span>)</span>.toEmbedding</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.addNat\">Fin.addNat</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span></span>,\n    <span class=\"fn\">inj'</span> := <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.addNat\">Fin.addNat</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.addNat\">Fin.addNat</a> <span class=\"fn\">x_1</span> <span class=\"fn\">m</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1108-L1108","name":"Fin.addNatEmb_apply","line":1108,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">addNatEmb_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.addNatEmb\">Fin.addNatEmb</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.addNat\">Fin.addNat</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1103-L1104","name":"Fin.strictMono_addNat","line":1103,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_addNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_addNat\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_addNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.addNat\">Fin.addNat</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1095-L1098","name":"Fin.coe_of_injective_castSucc_symm","line":1095,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_of_injective_castSucc_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_of_injective_castSucc_symm\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_of_injective_castSucc_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Fin.castSucc</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Set.html#Equiv.ofInjective\">Equiv.ofInjective</a> <span class=\"fn\">Fin.castSucc</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Fin.castSucc</span></span>)</span></span>)</span>.symm</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hi</span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1089-L1091","name":"Fin.range_castSucc","line":1089,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.range_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.range_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">range_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">Fin.castSucc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> | <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1079-L1081","name":"Fin.coe_eq_castSucc","line":1079,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_eq_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_eq_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_eq_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1070-L1074","name":"Fin.succ_ne_last_of_lt","line":1070,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_ne_last_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_ne_last_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_ne_last_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1067-L1068","name":"Fin.succ_ne_last_iff","line":1067,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_ne_last_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_ne_last_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_ne_last_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1061-L1065","name":"Fin.castSucc_ne_zero_of_lt","line":1061,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_ne_zero_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_ne_zero_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_ne_zero_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1057-L1058","name":"Fin.castSucc_ne_zero_iff'","line":1057,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_ne_zero_iff'","doc":"The `Fin.castSucc_ne_zero_iff` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_ne_zero_iff'\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_ne_zero_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1049-L1050","name":"Fin.castSucc_eq_zero_iff'","line":1049,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_eq_zero_iff'","doc":"The `Fin.castSucc_eq_zero_iff` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_eq_zero_iff'\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_eq_zero_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1040-L1041","name":"Fin.castSucc_pos'","line":1040,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pos'","doc":"`castSucc i` is positive when `i` is positive.\n\nThe `Fin.castSucc_pos` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_pos'\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_pos'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1031-L1032","name":"Fin.castSucc_zero'","line":1031,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_zero'","doc":"The `Fin.castSucc_zero` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_zero'\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1021-L1024","name":"Fin.exists_fin_succ'","line":1021,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.exists_fin_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.exists_fin_succ'\"><span class=\"name\">Fin</span>.<span class=\"name\">exists_fin_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1018-L1019","name":"Fin.eq_castSucc_or_eq_last","line":1018,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.eq_castSucc_or_eq_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.eq_castSucc_or_eq_last\"><span class=\"name\">Fin</span>.<span class=\"name\">eq_castSucc_or_eq_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">j</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1013-L1015","name":"Fin.forall_fin_succ'","line":1013,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.forall_fin_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.forall_fin_succ'\"><span class=\"name\">Fin</span>.<span class=\"name\">forall_fin_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1006-L1007","name":"Fin.castSucc_injective","line":1006,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_injective\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_injective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Fin.castSucc</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L1003-L1004","name":"Fin.exists_castSucc_eq_of_ne_last","line":1003,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.exists_castSucc_eq_of_ne_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.exists_castSucc_eq_of_ne_last\"><span class=\"name\">Fin</span>.<span class=\"name\">exists_castSucc_eq_of_ne_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L999-L1001","name":"Fin.succ_le_or_le_castSucc","line":999,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_le_or_le_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_le_or_le_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_le_or_le_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L995-L996","name":"Fin.castSucc_lt_or_lt_succ","line":995,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_lt_or_lt_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_lt_or_lt_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_lt_or_lt_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L992-L993","name":"Fin.le_of_castSucc_lt_of_succ_lt","line":992,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_of_castSucc_lt_of_succ_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_of_castSucc_lt_of_succ_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">le_of_castSucc_lt_of_succ_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L989-L990","name":"Fin.castSucc_lt_succ_iff","line":989,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_lt_succ_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_lt_succ_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_lt_succ_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L986-L987","name":"Fin.succ_le_castSucc_iff","line":986,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_le_castSucc_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_le_castSucc_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_le_castSucc_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L984-L984","name":"Fin.castSucc_le_castSucc_iff","line":984,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_le_castSucc_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSucc_le_castSucc_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">castSucc_le_castSucc_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} {<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L965-L966","name":"Fin.castSuccEmb","line":965,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSuccEmb","doc":"`Fin.castSucc` as an `OrderEmbedding`, `castSuccEmb i` embeds `i : Fin n` in `Fin (n+1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSuccEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">castSuccEmb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L964-L964","name":"Fin.castSuccEmb_toEmbedding","line":964,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSuccEmb_toEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSuccEmb_toEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">castSuccEmb_toEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.castSuccEmb</span>.toEmbedding</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">Fin.castSucc</span>, <span class=\"fn\">inj'</span> := <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">x_1</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L964-L964","name":"Fin.castSuccEmb_apply","line":964,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castSuccEmb_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castSuccEmb_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">castSuccEmb_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.castSuccEmb</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L960-L961","name":"Fin.strictMono_castSucc","line":960,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">Fin.castSucc</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L935-L936","name":"Fin.castAddEmb","line":935,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb","doc":"`Fin.castAdd` as an `OrderEmbedding`, `castAddEmb m i` embeds `i : Fin n` in `Fin (n+m)`.\nSee also `Fin.natAddEmb` and `Fin.addNatEmb`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">castAddEmb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L934-L934","name":"Fin.castAddEmb_toEmbedding","line":934,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb_toEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb_toEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">castAddEmb_toEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb\">Fin.castAddEmb</a> <span class=\"fn\">m</span></span>)</span>.toEmbedding</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">inj'</span> := <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">m</span> <span class=\"fn\">x_1</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L934-L934","name":"Fin.castAddEmb_apply","line":934,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">castAddEmb_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castAddEmb\">Fin.castAddEmb</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L929-L930","name":"Fin.strictMono_castAdd","line":929,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castAdd\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_castAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L923-L926","name":"Fin.cast_eq_cast","line":923,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_eq_cast","doc":"While in many cases `Fin.cast` is better than `Equiv.cast`/`cast`, sometimes we want to apply\na generic theorem about `cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_eq_cast\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_eq_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L916-L918","name":"Fin.castIso_to_equiv","line":916,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castIso_to_equiv","doc":"While in many cases `Fin.castIso` is better than `Equiv.cast`/`cast`, sometimes we want to apply\na generic theorem about `cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso_to_equiv\"><span class=\"name\">Fin</span>.<span class=\"name\">castIso_to_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\">Fin.castIso</a> <span class=\"fn\">h</span></span>)</span>.toEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.cast\">Equiv.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L907-L909","name":"Fin.castIso_refl","line":907,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castIso_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso_refl\"><span class=\"name\">Fin</span>.<span class=\"name\">castIso_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\">Fin.castIso</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.refl\">OrderIso.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L895-L897","name":"Fin.cast_zero","line":895,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L888-L889","name":"Fin.symm_castIso","line":888,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.symm_castIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.symm_castIso\"><span class=\"name\">Fin</span>.<span class=\"name\">symm_castIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">OrderIso.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\">Fin.castIso</a> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\">Fin.castIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L882-L884","name":"Fin.castIso","line":882,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castIso","doc":"`Fin.cast` as an `OrderIso`, `castIso eq i` embeds `i` into an equal `Fin` type,\nsee also `Equiv.finCongr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\"><span class=\"name\">Fin</span>.<span class=\"name\">castIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L881-L881","name":"Fin.castIso_symm_apply","line":881,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso_symm_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">castIso_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\">Fin.castIso</a> <span class=\"fn\">eq</span></span>)</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L881-L881","name":"Fin.castIso_apply","line":881,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">castIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castIso\">Fin.castIso</a> <span class=\"fn\">eq</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">eq</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L876-L877","name":"Fin.cast_le_cast","line":876,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_le_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_le_cast\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_le_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">eq</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">eq</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L873-L874","name":"Fin.rightInverse_cast","line":873,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rightInverse_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rightInverse_cast\"><span class=\"name\">Fin</span>.<span class=\"name\">rightInverse_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.RightInverse\">Function.RightInverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">eq</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L870-L871","name":"Fin.leftInverse_cast","line":870,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.leftInverse_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.leftInverse_cast\"><span class=\"name\">Fin</span>.<span class=\"name\">leftInverse_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.LeftInverse\">Function.LeftInverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">eq</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L860-L863","name":"Fin.coe_of_injective_castLEEmb_symm","line":860,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_of_injective_castLEEmb_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_of_injective_castLEEmb_symm\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_of_injective_castLEEmb_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb\">Fin.castLEEmb</a> <span class=\"fn\">h</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Set.html#Equiv.ofInjective\">Equiv.ofInjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb\">Fin.castLEEmb</a> <span class=\"fn\">h</span></span>)</span></span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb\">Fin.castLEEmb</a> <span class=\"fn\">h</span></span>)</span></span></span>)</span></span>)</span>.symm</span>\n      <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hi</span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L855-L856","name":"Fin.range_castLE","line":855,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.range_castLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.range_castLE\"><span class=\"name\">Fin</span>.<span class=\"name\">range_castLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> | <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L851-L852","name":"Fin.castLE_rfl","line":851,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLE_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLE_rfl\"><span class=\"name\">Fin</span>.<span class=\"name\">castLE_rfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L847-L849","name":"Fin.castLE_comp_castSucc","line":847,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLE_comp_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLE_comp_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">castLE_comp_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Fin.castSucc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L843-L845","name":"Fin.castLE_castSucc","line":843,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLE_castSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLE_castSucc\"><span class=\"name\">Fin</span>.<span class=\"name\">castLE_castSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L838-L840","name":"Fin.equiv_iff_eq","line":838,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.equiv_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.equiv_iff_eq\"><span class=\"name\">Fin</span>.<span class=\"name\">equiv_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L825-L836","name":"Fin.nonempty_embedding_iff","line":825,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.nonempty_embedding_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.nonempty_embedding_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">nonempty_embedding_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L812-L813","name":"Fin.castLEEmb","line":812,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb","doc":"`Fin.castLE` as an `OrderEmbedding`, `castLEEmb h i` embeds `i` into a larger `Fin` type.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">castLEEmb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L811-L811","name":"Fin.castLEEmb_toEmbedding","line":811,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb_toEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb_toEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">castLEEmb_toEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb\">Fin.castLEEmb</a> <span class=\"fn\">h</span></span>)</span>.toEmbedding</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span></span>, <span class=\"fn\">inj'</span> := <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span> <span class=\"fn\">x_1</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L811-L811","name":"Fin.castLEEmb_apply","line":811,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">castLEEmb_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.castLEEmb\">Fin.castLEEmb</a> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L807-L808","name":"Fin.strictMono_castLE","line":807,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_castLE\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_castLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castLE\">Fin.castLE</a> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L804-L805","name":"Fin.cast_refl","line":804,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_refl\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L794-L795","name":"Fin.le_zero_iff'","line":794,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_zero_iff'","doc":"The `Fin.le_zero_iff` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_zero_iff'\"><span class=\"name\">Fin</span>.<span class=\"name\">le_zero_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L771-L774","name":"Fin.succ_one_eq_two'","line":771,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_one_eq_two'","doc":"The `Fin.succ_one_eq_two` in `Std` only applies in `Fin (n+2)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_one_eq_two'\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_one_eq_two'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L762-L762","name":"Fin.zero_ne_one'","line":762,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.zero_ne_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.zero_ne_one'\"><span class=\"name\">Fin</span>.<span class=\"name\">zero_ne_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L761-L761","name":"Fin.one_pos'","line":761,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.one_pos'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.one_pos'\"><span class=\"name\">Fin</span>.<span class=\"name\">one_pos'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L755-L758","name":"Fin.succ_zero_eq_one'","line":755,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_zero_eq_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_zero_eq_one'\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_zero_eq_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L748-L748","name":"Fin.succ_injective","line":748,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succ_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succ_injective\"><span class=\"name\">Fin</span>.<span class=\"name\">succ_injective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Fin.succ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L745-L746","name":"Fin.exists_succ_eq_of_ne_zero","line":745,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.exists_succ_eq_of_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.exists_succ_eq_of_ne_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">exists_succ_eq_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L741-L742","name":"Fin.exists_succ_eq","line":741,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.exists_succ_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.exists_succ_eq\"><span class=\"name\">Fin</span>.<span class=\"name\">exists_succ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L734-L734","name":"Fin.val_succEmb","line":734,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_succEmb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_succEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">val_succEmb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succEmb\">Fin.succEmb</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Fin.succ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L730-L730","name":"Fin.succEmb","line":730,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.succEmb","doc":"`Fin.succ` as an `OrderEmbedding` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.succEmb\"><span class=\"name\">Fin</span>.<span class=\"name\">succEmb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L727-L727","name":"Fin.strictMono_succ","line":727,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">Fin.succ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L713-L713","name":"Fin.zero_eq_one_iff","line":713,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.zero_eq_one_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.zero_eq_one_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">zero_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L708-L709","name":"Fin.one_eq_zero_iff","line":708,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.one_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.one_eq_zero_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">one_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L696-L698","name":"Fin.le_val_last","line":696,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_val_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_val_last\"><span class=\"name\">Fin</span>.<span class=\"name\">le_val_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L693-L693","name":"Fin.cast_nat_eq_last","line":693,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_nat_eq_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_nat_eq_last\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_nat_eq_last</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L689-L690","name":"Fin.nat_cast_eq_zero","line":689,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.nat_cast_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.nat_cast_eq_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">nat_cast_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L687-L687","name":"Fin.nat_cast_self","line":687,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.nat_cast_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.nat_cast_self\"><span class=\"name\">Fin</span>.<span class=\"name\">nat_cast_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L677-L678","name":"Fin.cast_val_eq_self","line":677,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_val_eq_self","doc":"Converting the value of a `Fin (n + 1)` to `Fin (n + 1)` results\nin the same value.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_val_eq_self\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_val_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L671-L672","name":"Fin.val_cast_of_lt","line":671,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_cast_of_lt","doc":"Converting an in-range number to `Fin (n + 1)` produces a result\nwhose value is the original number.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_cast_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">val_cast_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L666-L666","name":"Fin.val_nat_cast","line":666,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_nat_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_nat_cast\"><span class=\"name\">Fin</span>.<span class=\"name\">val_nat_cast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L662-L663","name":"Fin.ofNat''_eq_cast","line":662,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.ofNat''_eq_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.ofNat''_eq_cast\"><span class=\"name\">Fin</span>.<span class=\"name\">ofNat''_eq_cast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.ofNat''\">Fin.ofNat''</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L644-L649","name":"Fin.mk_bit1","line":644,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.mk_bit1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.mk_bit1\"><span class=\"name\">Fin</span>.<span class=\"name\">mk_bit1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit1\">bit1</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit1\">bit1</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit1\">bit1</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">m</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L638-L640","name":"Fin.mk_bit0","line":638,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.mk_bit0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.mk_bit0\"><span class=\"name\">Fin</span>.<span class=\"name\">mk_bit0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit0\">bit0</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit0\">bit0</a> <span class=\"fn\">m</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit0\">bit0</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">m</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L617-L625","name":"Fin.val_bit1","line":617,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_bit1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_bit1\"><span class=\"name\">Fin</span>.<span class=\"name\">val_bit1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit1\">bit1</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit1\">bit1</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L611-L613","name":"Fin.val_bit0","line":611,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_bit0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_bit0\"><span class=\"name\">Fin</span>.<span class=\"name\">val_bit0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit0\">bit0</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#bit0\">bit0</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L601-L604","name":"Fin.val_add_eq_ite","line":601,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_add_eq_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_add_eq_ite\"><span class=\"name\">Fin</span>.<span class=\"name\">val_add_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span></span> else <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L589-L593","name":"Fin.instAddMonoidWithOne","line":589,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instAddMonoidWithOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instAddMonoidWithOne\"><span class=\"name\">Fin</span>.<span class=\"name\">instAddMonoidWithOne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#AddMonoidWithOne\">AddMonoidWithOne</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L583-L586","name":"Fin.addCommMonoid","line":583,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.addCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.addCommMonoid\"><span class=\"name\">Fin</span>.<span class=\"name\">addCommMonoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L579-L581","name":"Fin.instAddCommSemigroupFin","line":579,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instAddCommSemigroupFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instAddCommSemigroupFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instAddCommSemigroupFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L575-L575","name":"Fin.ofNat'_one","line":575,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.ofNat'_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.ofNat'_one\"><span class=\"name\">Fin</span>.<span class=\"name\">ofNat'_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.ofNat'\">Fin.ofNat'</a> <span class=\"fn\">1</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L574-L574","name":"Fin.ofNat'_zero","line":574,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.ofNat'_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.ofNat'_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">ofNat'_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.ofNat'\">Fin.ofNat'</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L568-L569","name":"Fin.default_eq_zero","line":568,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.default_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.default_eq_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">default_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L563-L565","name":"Fin.inhabitedFinOneAdd","line":563,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.inhabitedFinOneAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.inhabitedFinOneAdd\"><span class=\"name\">Fin</span>.<span class=\"name\">inhabitedFinOneAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L560-L561","name":"Fin.inhabited","line":560,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.inhabited\"><span class=\"name\">Fin</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L557-L558","name":"Fin.instOfNatFin","line":557,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instOfNatFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instOfNatFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instOfNatFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L553-L554","name":"Fin.zero_add","line":553,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.zero_add\"><span class=\"name\">Fin</span>.<span class=\"name\">zero_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L548-L549","name":"Fin.add_zero","line":548,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.add_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">add_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L541-L544","name":"Fin.addCommSemigroup","line":541,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.addCommSemigroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.addCommSemigroup\"><span class=\"name\">Fin</span>.<span class=\"name\">addCommSemigroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L531-L533","name":"Fin.nontrivial_iff_two_le","line":531,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.nontrivial_iff_two_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.nontrivial_iff_two_le\"><span class=\"name\">Fin</span>.<span class=\"name\">nontrivial_iff_two_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L528-L529","name":"Fin.nontrivial","line":528,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.nontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.nontrivial\"><span class=\"name\">Fin</span>.<span class=\"name\">nontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L522-L523","name":"Fin.val_one''","line":522,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_one''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_one''\"><span class=\"name\">Fin</span>.<span class=\"name\">val_one''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L517-L518","name":"Fin.val_one'","line":517,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_one'\"><span class=\"name\">Fin</span>.<span class=\"name\">val_one'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L499-L500","name":"Fin.orderEmbedding_eq","line":499,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderEmbedding_eq","doc":"Two order embeddings of `Fin n` are equal provided that their ranges are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderEmbedding_eq\"><span class=\"name\">Fin</span>.<span class=\"name\">orderEmbedding_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L492-L495","name":"Fin.strictMono_unique","line":492,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_unique","doc":"Two strictly monotone functions from `Fin n` are equal provided that their ranges\nare equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.strictMono_unique\"><span class=\"name\">Fin</span>.<span class=\"name\">strictMono_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L486-L487","name":"Fin.orderIsoUnique","line":486,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoUnique\"><span class=\"name\">Fin</span>.<span class=\"name\">orderIsoUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L482-L483","name":"Fin.orderIso_subsingleton'","line":482,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderIso_subsingleton'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderIso_subsingleton'\"><span class=\"name\">Fin</span>.<span class=\"name\">orderIso_subsingleton'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L475-L479","name":"Fin.orderIso_subsingleton","line":475,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderIso_subsingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderIso_subsingleton\"><span class=\"name\">Fin</span>.<span class=\"name\">orderIso_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L461-L472","name":"Fin.coe_orderIso_apply","line":461,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.coe_orderIso_apply","doc":"If `e` is an `orderIso` between `Fin n` and `Fin m`, then `n = m` and `e` is the identity\nmap. In this lemma we state that for each `i : Fin n` we have `(e i : ℕ) = (i : ℕ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.coe_orderIso_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_orderIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L448-L449","name":"Fin.bot_eq_zero","line":448,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.bot_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.bot_eq_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">bot_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L444-L445","name":"Fin.top_eq_last","line":444,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.top_eq_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.top_eq_last\"><span class=\"name\">Fin</span>.<span class=\"name\">top_eq_last</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L442-L442","name":"Fin.one_lt_last","line":442,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.one_lt_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.one_lt_last\"><span class=\"name\">Fin</span>.<span class=\"name\">one_lt_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L440-L440","name":"Fin.last_pos'","line":440,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.last_pos'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.last_pos'\"><span class=\"name\">Fin</span>.<span class=\"name\">last_pos'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L434-L435","name":"Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat","line":434,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat\"><span class=\"name\">Fin</span>.<span class=\"name\">instLatticeFinHAddNatInstHAddInstAddNatOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L428-L432","name":"Fin.instBoundedOrderFinHAddNatInstHAddInstAddNatOfNatInstLEFin","line":428,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instBoundedOrderFinHAddNatInstHAddInstAddNatOfNatInstLEFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instBoundedOrderFinHAddNatInstHAddInstAddNatOfNatInstLEFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instBoundedOrderFinHAddNatInstHAddInstAddNatOfNatInstLEFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L418-L419","name":"Fin.le_rev_iff","line":418,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_rev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_rev_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">le_rev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">j</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L415-L416","name":"Fin.lt_rev_iff","line":415,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.lt_rev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.lt_rev_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">lt_rev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">j</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L412-L413","name":"Fin.rev_le_iff","line":412,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_le_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L409-L410","name":"Fin.rev_lt_iff","line":409,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_lt_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L407-L407","name":"Fin.rev_ne_iff","line":407,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_ne_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_ne_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_ne_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L404-L405","name":"Fin.rev_eq_iff","line":404,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_eq_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L400-L402","name":"Fin.cast_rev","line":400,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_rev\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L396-L397","name":"Fin.revOrderIso_symm_apply","line":396,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso_symm_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">revOrderIso_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">OrderIso.symm</a> <span class=\"fn\">Fin.revOrderIso</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">OrderDual.toDual</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L389-L390","name":"Fin.revOrderIso","line":389,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso","doc":"`Fin.rev n` as an order-reversing isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso\"><span class=\"name\">Fin</span>.<span class=\"name\">revOrderIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L388-L388","name":"Fin.revOrderIso_toEquiv","line":388,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso_toEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso_toEquiv\"><span class=\"name\">Fin</span>.<span class=\"name\">revOrderIso_toEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.revOrderIso</span>.toEquiv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">OrderDual.ofDual</span>.trans <span class=\"fn\">Fin.revPerm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L388-L388","name":"Fin.revOrderIso_apply","line":388,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revOrderIso_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">revOrderIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.revOrderIso</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">OrderDual.ofDual</span> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L377-L378","name":"Fin.revPerm_symm","line":377,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revPerm_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revPerm_symm\"><span class=\"name\">Fin</span>.<span class=\"name\">revPerm_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.revPerm</span>.symm</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Fin.revPerm</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L368-L369","name":"Fin.rev_bijective","line":368,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_bijective\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">Fin.rev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L364-L365","name":"Fin.rev_surjective","line":364,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_surjective\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">Fin.rev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L360-L361","name":"Fin.rev_injective","line":360,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_injective\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Fin.rev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L354-L355","name":"Fin.revPerm","line":354,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revPerm","doc":"`Fin.rev` as an `Equiv.Perm`, the antitone involution `Fin n → Fin n` given by\n`i ↦ n-(i+1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revPerm\"><span class=\"name\">Fin</span>.<span class=\"name\">revPerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L353-L353","name":"Fin.revPerm_apply","line":353,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revPerm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revPerm_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">revPerm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.revPerm</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L353-L353","name":"Fin.revPerm_symm_apply","line":353,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.revPerm_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.revPerm_symm_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">revPerm_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.revPerm</span>.symm</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.rev\">Fin.rev</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L344-L348","name":"Fin.rev_involutive","line":344,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rev_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rev_involutive\"><span class=\"name\">Fin</span>.<span class=\"name\">rev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">Fin.rev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L342-L342","name":"Fin.cast_eq_self","line":342,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.cast_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.cast_eq_self\"><span class=\"name\">Fin</span>.<span class=\"name\">cast_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L335-L336","name":"Fin.pos_iff_ne_zero'","line":335,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.pos_iff_ne_zero'","doc":"The `Fin.pos_iff_ne_zero` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.pos_iff_ne_zero'\"><span class=\"name\">Fin</span>.<span class=\"name\">pos_iff_ne_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L324-L325","name":"Fin.zero_le'","line":324,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.zero_le'","doc":"The `Fin.zero_le` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.zero_le'\"><span class=\"name\">Fin</span>.<span class=\"name\">zero_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L313-L314","name":"Fin.val_zero'","line":313,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_zero'","doc":"The `Fin.val_zero` in `Std` only applies in `Fin (n+1)`.\nThis one instead uses a `NeZero n` typeclass hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_zero'\"><span class=\"name\">Fin</span>.<span class=\"name\">val_zero'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L304-L304","name":"Fin.instOneFin","line":304,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instOneFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instOneFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instOneFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L303-L303","name":"Fin.instZeroFin","line":303,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instZeroFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instZeroFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instZeroFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L297-L298","name":"Fin.ofNat''","line":297,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.ofNat''","doc":"Given a positive `n`, `Fin.ofNat' i` is `i % n` as an element of `Fin n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.ofNat''\"><span class=\"name\">Fin</span>.<span class=\"name\">ofNat''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L293-L294","name":"Fin.instWellFoundedRelationFin","line":293,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instWellFoundedRelationFin","doc":"Use the ordering on `Fin n` for checking recursive definitions.\n\nFor example, the following definition is not accepted by the termination checker,\nunless we declare the `WellFoundedRelation` instance:\n```lean\ndef factorial {n : ℕ} : Fin n → ℕ\n  | ⟨0, _⟩ := 1\n  | ⟨i + 1, hi⟩ := (i + 1) * factorial ⟨i, i.lt_succ_self.trans hi⟩\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instWellFoundedRelationFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instWellFoundedRelationFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L279-L280","name":"Fin.Lt.isWellOrder","line":279,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.Lt.isWellOrder","doc":"The ordering on `Fin n` is a well order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.Lt.isWellOrder\"><span class=\"name\">Fin</span>.<span class=\"name\">Lt</span>.<span class=\"name\">isWellOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L274-L275","name":"Fin.valOrderEmbedding","line":274,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.valOrderEmbedding","doc":"The inclusion map `Fin n → ℕ` is an order embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.valOrderEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">valOrderEmbedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderEmbedding\">↪o</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L273-L273","name":"Fin.valOrderEmbedding_apply","line":273,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.valOrderEmbedding_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.valOrderEmbedding_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">valOrderEmbedding_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Basic.html#Fin.valOrderEmbedding\">Fin.valOrderEmbedding</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">self</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L267-L269","name":"Fin.equivSubtype_symm_trans_valEmbedding","line":267,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype_symm_trans_valEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype_symm_trans_valEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">equivSubtype_symm_trans_valEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.trans\">Function.Embedding.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Embedding/Basic.html#Equiv.toEmbedding\">Equiv.toEmbedding</a> <span class=\"fn\"><span class=\"fn\">Fin.equivSubtype</span>.symm</span></span>)</span> <span class=\"fn\">Fin.valEmbedding</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.subtype\">Function.Embedding.subtype</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L262-L263","name":"Fin.valEmbedding","line":262,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.valEmbedding","doc":"The inclusion map `Fin n → ℕ` is an embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.valEmbedding\"><span class=\"name\">Fin</span>.<span class=\"name\">valEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L261-L261","name":"Fin.valEmbedding_apply","line":261,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.valEmbedding_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.valEmbedding_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">valEmbedding_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.valEmbedding</span> <span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">self</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L254-L255","name":"Fin.orderIsoSubtype","line":254,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoSubtype","doc":"The equivalence `Fin n ≃ { i // i < n }` is an order isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoSubtype\"><span class=\"name\">Fin</span>.<span class=\"name\">orderIsoSubtype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">{ <span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L253-L253","name":"Fin.orderIsoSubtype_symm_apply","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoSubtype_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoSubtype_symm_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">orderIsoSubtype_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">{ <span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <span class=\"fn\">Fin.orderIsoSubtype</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">a</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L253-L253","name":"Fin.orderIsoSubtype_apply","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoSubtype_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.orderIsoSubtype_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">orderIsoSubtype_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.orderIsoSubtype</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">a</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L249-L249","name":"Fin.val_strictMono","line":249,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_strictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_strictMono\"><span class=\"name\">Fin</span>.<span class=\"name\">val_strictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#StrictMono\">StrictMono</a> <span class=\"fn\">Fin.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L247-L247","name":"Fin.instPartialOrderFin","line":247,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instPartialOrderFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instPartialOrderFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instPartialOrderFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L244-L244","name":"Fin.max_val","line":244,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.max_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.max_val\"><span class=\"name\">Fin</span>.<span class=\"name\">max_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L240-L240","name":"Fin.min_val","line":240,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.min_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.min_val\"><span class=\"name\">Fin</span>.<span class=\"name\">min_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L231-L234","name":"Fin.instLinearOrderFin","line":231,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instLinearOrderFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instLinearOrderFin\"><span class=\"name\">Fin</span>.<span class=\"name\">instLinearOrderFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L227-L228","name":"Fin.val_fin_le","line":227,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_fin_le","doc":"`a ≤ b` as natural numbers if and only if `a ≤ b` in `Fin n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_fin_le\"><span class=\"name\">Fin</span>.<span class=\"name\">val_fin_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L221-L222","name":"Fin.val_fin_lt","line":221,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_fin_lt","doc":"`a < b` as natural numbers if and only if `a < b` in `Fin n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_fin_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">val_fin_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L212-L213","name":"Fin.le_iff_val_le_val","line":212,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.le_iff_val_le_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.le_iff_val_le_val\"><span class=\"name\">Fin</span>.<span class=\"name\">le_iff_val_le_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L189-L192","name":"Fin.heq_ext_iff","line":189,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.heq_ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.heq_ext_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">heq_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L182-L187","name":"Fin.heq_fun₂_iff","line":182,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.heq_fun₂_iff","doc":"Assume `k = l` and `k' = l'`.\nIf two functions `Fin k → Fin k' → α` and `Fin l → Fin l' → α` are equal on each pair,\nthen they coincide (in the heq sense). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.heq_fun₂_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">heq_fun₂_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k' : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l' : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k'</span></span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l'</span></span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k'</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">i</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>)</span> }</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">j</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l'</span></span>)</span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L173-L176","name":"Fin.heq_fun_iff","line":173,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.heq_fun_iff","doc":"Assume `k = l`. If two functions defined on `Fin k` and `Fin l` are equal on each element,\nthen they coincide (in the heq sense). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.heq_fun_iff\"><span class=\"name\">Fin</span>.<span class=\"name\">heq_fun_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">i</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>)</span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L157-L158","name":"Fin.mk_eq_mk","line":157,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.mk_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.mk_eq_mk\"><span class=\"name\">Fin</span>.<span class=\"name\">mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a'</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h'</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L150-L151","name":"Fin.ne_iff_vne","line":150,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.ne_iff_vne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.ne_iff_vne\"><span class=\"name\">Fin</span>.<span class=\"name\">ne_iff_vne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L146-L147","name":"Fin.eq_iff_veq","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.eq_iff_veq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.eq_iff_veq\"><span class=\"name\">Fin</span>.<span class=\"name\">eq_iff_veq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L142-L143","name":"Fin.val_eq_val","line":142,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_eq_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_eq_val\"><span class=\"name\">Fin</span>.<span class=\"name\">val_eq_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L122-L126","name":"Fin.equivSubtype","line":122,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype","doc":"Equivalence between `Fin n` and `{ i // i < n }`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype\"><span class=\"name\">Fin</span>.<span class=\"name\">equivSubtype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L121-L121","name":"Fin.equivSubtype_symm_apply","line":121,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype_symm_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">equivSubtype_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">{ <span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.equivSubtype</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">a</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L121-L121","name":"Fin.equivSubtype_apply","line":121,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.equivSubtype_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">equivSubtype_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Fin.equivSubtype</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">↑<span class=\"fn\">a</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L112-L113","name":"Fin.prop","line":112,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.prop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.prop\"><span class=\"name\">Fin</span>.<span class=\"name\">prop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L109-L110","name":"Fin.size_positive'","line":109,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.size_positive'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.size_positive'\"><span class=\"name\">Fin</span>.<span class=\"name\">size_positive'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L107-L107","name":"Fin.size_positive","line":107,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.size_positive","doc":"If you actually have an element of `Fin n`, then the `n` is always positive "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.size_positive\"><span class=\"name\">Fin</span>.<span class=\"name\">size_positive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L102-L103","name":"Fin.val_injective","line":102,"kind":"theorem","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.val_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.val_injective\"><span class=\"name\">Fin</span>.<span class=\"name\">val_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Fin.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L93-L93","name":"Fin.rec0","line":93,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.rec0","doc":"A dependent variant of `Fin.elim0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.rec0\"><span class=\"name\">Fin</span>.<span class=\"name\">rec0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L89-L90","name":"Fin.instCanLiftNatFinValLtInstLTNat","line":89,"kind":"instance","docLink":"./Mathlib/Data/Fin/Basic.html#Fin.instCanLiftNatFinValLtInstLTNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#Fin.instCanLiftNatFinValLtInstLTNat\"><span class=\"name\">Fin</span>.<span class=\"name\">instCanLiftNatFinValLtInstLTNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Lift.html#CanLift\">CanLift</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">Fin.val</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Data/Fin/Basic.lean#L83-L84","name":"finZeroElim","line":83,"kind":"def","docLink":"./Mathlib/Data/Fin/Basic.html#finZeroElim","doc":"Elimination principle for the empty set `Fin 0`, dependent version. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Fin/Basic.html#finZeroElim\"><span class=\"name\">finZeroElim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">x</span></span></div></div>"}]}