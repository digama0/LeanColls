{"name":"LeanColls.Classes.Ops","instances":[{"typeNames":[],"name":"LeanColls.instToFinset","className":"LeanColls.ToFinset"},{"typeNames":[],"name":"LeanColls.instLawfulToMultisetInstToFinset","className":"LeanColls.LawfulToMultiset"},{"typeNames":[],"name":"LeanColls.ToList.instToMultiset","className":"LeanColls.ToMultiset"},{"typeNames":[],"name":"LeanColls.ToList.instLawfulToListInstToMultiset","className":"LeanColls.LawfulToList"},{"typeNames":[],"name":"LeanColls.Fold.instForIn","className":"ForIn"},{"typeNames":[],"name":"LeanColls.Insert.instInsert","className":"LeanColls.Insert"},{"typeNames":[],"name":"LeanColls.Insert.instMem","className":"LeanColls.Insert.Mem"},{"typeNames":[],"name":"LeanColls.Size.ofFold","className":"LeanColls.Size"}],"imports":["Init","LeanColls.MathlibUpstream"],"declarations":[{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L442-L443","name":"LeanColls.Size.ofFold","line":442,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Size.ofFold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.ofFold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span>.<span class=\"name\">ofFold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\">LeanColls.Size</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L439-L439","name":"LeanColls.Size.size","line":439,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Size.size","doc":"Number of elements in the collection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\">LeanColls.Size</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L437-L437","name":"LeanColls.Size.mk","line":437,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Size.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(size : <span class=\"fn\"><span class=\"fn\">C</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\">LeanColls.Size</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L437-L439","name":"LeanColls.Size","line":437,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L432-L432","name":"LeanColls.Fold.into","line":432,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.into","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.into\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">into</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C' : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C'</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C'</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L430-L431","name":"LeanColls.Insert.into","line":430,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.into","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.into\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">into</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C' : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C'</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C'</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L424-L428","name":"LeanColls.Insert.toList_singleton","line":424,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.toList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.toList_singleton\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">toList_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">τ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList\">LeanColls.LawfulToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\">LeanColls.singleton</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L417-L422","name":"LeanColls.Insert.toList_empty","line":417,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.toList_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.toList_empty\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">toList_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\">LeanColls.Insert.Mem</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">LeanColls.empty</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L406-L415","name":"LeanColls.Insert.instMem","line":406,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.instMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.instMem\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">instMem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset\">LeanColls.Mem.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\">LeanColls.Insert.Mem</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L403-L403","name":"LeanColls.Insert.ToMultiset.toMultiset_singleton","line":403,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.toMultiset_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.toMultiset_singleton\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">toMultiset_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\">LeanColls.singleton</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L401-L401","name":"LeanColls.Insert.ToMultiset.toMultiset_insert","line":401,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.toMultiset_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.toMultiset_insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">toMultiset_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.insert\">LeanColls.insert</a> <span class=\"fn\">cont</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.cons\">::ₘ</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L400-L400","name":"LeanColls.Insert.ToMultiset.toMultiset_empty","line":400,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.toMultiset_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.toMultiset_empty\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">toMultiset_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">LeanColls.empty</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L399-L399","name":"LeanColls.Insert.ToMultiset.mk","line":399,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toMultiset_empty : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">LeanColls.empty</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toMultiset_insert : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.insert\">LeanColls.insert</a> <span class=\"fn\">cont</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.cons\">::ₘ</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toMultiset_singleton : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\">LeanColls.singleton</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L399-L404","name":"LeanColls.Insert.ToMultiset","line":399,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">ToMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L397-L397","name":"LeanColls.Insert.Mem.mem_singleton","line":397,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mem_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mem_singleton\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">Mem</span>.<span class=\"name\">mem_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\">LeanColls.Insert.Mem</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\">LeanColls.singleton</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L396-L396","name":"LeanColls.Insert.Mem.mem_insert","line":396,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mem_insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">Mem</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\">LeanColls.Insert.Mem</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.insert\">LeanColls.insert</a> <span class=\"fn\">cont</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L395-L395","name":"LeanColls.Insert.Mem.mem_empty","line":395,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mem_empty\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">Mem</span>.<span class=\"name\">mem_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\">LeanColls.Insert.Mem</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">LeanColls.empty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L394-L394","name":"LeanColls.Insert.Mem.mk","line":394,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">Mem</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mem_empty : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>), <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">LeanColls.empty</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mem_insert : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">τ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.insert\">LeanColls.insert</a> <span class=\"fn\">cont</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mem_singleton : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\">τ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\">LeanColls.singleton</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\">LeanColls.Insert.Mem</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L394-L397","name":"LeanColls.Insert.Mem","line":394,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.Mem\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L388-L390","name":"LeanColls.Insert.instInsert","line":388,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.instInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.instInsert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">instInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert\">Insert</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L383-L383","name":"LeanColls.Insert.singleton","line":383,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L382-L382","name":"LeanColls.Insert.insert","line":382,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L381-L381","name":"LeanColls.Insert.empty","line":381,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.empty\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L380-L380","name":"LeanColls.Insert.mk","line":380,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(empty : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(insert : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(singleton : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L380-L383","name":"LeanColls.Insert","line":380,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Insert","doc":"`C` has an empty collection, and a way to insert `τ`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L373-L373","name":"LeanColls.Iterate.next?","line":373,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Iterate.next?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate.next?\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Iterate</span>.<span class=\"name\">next?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate\">LeanColls.Iterate</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ρ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L372-L372","name":"LeanColls.Iterate.iterate","line":372,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Iterate.iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate.iterate\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Iterate</span>.<span class=\"name\">iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate\">LeanColls.Iterate</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">ρ</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L371-L371","name":"LeanColls.Iterate.mk","line":371,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Iterate.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Iterate</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ρ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(iterate : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(next? : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">ρ</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate\">LeanColls.Iterate</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span> <span class=\"fn\">ρ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L371-L373","name":"LeanColls.Iterate","line":371,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Iterate","doc":"`C` with element type `τ` can be iterated using type `ρ`\n\n**Note:** This is essentially a combination of Lean core's\n[ToStream] and [Stream] classes.\nBy combining them we can avoid relying on distinct `ρ` types\nto associate the `next?` and `iterate` functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Iterate\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Iterate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ρ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L352-L359","name":"LeanColls.Fold.toMem.ToList","line":352,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.toMem.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.toMem.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">toMem</span>.<span class=\"name\">ToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L349-L350","name":"LeanColls.Fold.toMem","line":349,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.toMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.toMem\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">toMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L343-L347","name":"LeanColls.Fold.all_iff_exists","line":343,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.all_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.all_iff_exists\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">all_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.all\">LeanColls.Fold.all</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">c</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L336-L340","name":"LeanColls.Fold.any_iff_exists","line":336,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.any_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.any_iff_exists\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">any_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.any\">LeanColls.Fold.any</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ x ∈ <span class=\"fn\">c</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L314-L333","name":"LeanColls.Fold.all_eq_all_toList","line":314,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.all_eq_all_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.all_eq_all_toList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">all_eq_all_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.all\">LeanColls.Fold.all</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L293-L312","name":"LeanColls.Fold.any_eq_any_toList","line":293,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.any_eq_any_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.any_eq_any_toList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">any_eq_any_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.any\">LeanColls.Fold.any</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L284-L291","name":"LeanColls.Fold.all","line":284,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.all\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L275-L282","name":"LeanColls.Fold.any","line":275,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.any\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L266-L273","name":"LeanColls.Fold.find","line":266,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.find","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.find\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">find</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L255-L264","name":"LeanColls.Fold.instForIn","line":255,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.instForIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.instForIn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">instForIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L234-L253","name":"LeanColls.Fold.sum.ToList","line":234,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.sum.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.sum.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">sum</span>.<span class=\"name\">ToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[L₁ : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[L₂ : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">τ₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L225-L232","name":"LeanColls.Fold.sum","line":225,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.sum\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">τ₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L202-L222","name":"LeanColls.Fold.prod.ToList","line":202,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.prod.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.prod.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">prod</span>.<span class=\"name\">ToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[L₁ : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[L₂ : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L194-L200","name":"LeanColls.Fold.prod","line":194,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.prod\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L175-L191","name":"LeanColls.Fold.map.ToList","line":175,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.map.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.map.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">map</span>.<span class=\"name\">ToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[F : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[L : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C'</span> <span class=\"fn\">τ'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fc : <span class=\"fn\"><span class=\"fn\">C'</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ft : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">c'</span> : <span class=\"fn\">C'</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">ft</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">fc</span> <span class=\"fn\">c'</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C'</span> <span class=\"fn\">τ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L171-L173","name":"LeanColls.Fold.map","line":171,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.map\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fc : <span class=\"fn\"><span class=\"fn\">C'</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ft : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C'</span> <span class=\"fn\">τ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L155-L168","name":"LeanColls.Fold.bind_fold_pure","line":155,"kind":"theorem","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.bind_fold_pure","doc":"A strange lemma. Analogous to `bind_pure` chained over the length of `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.bind_fold_pure\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">bind_fold_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ma : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">do\n    let a ← <span class=\"fn\">ma</span>\n    <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\">LeanColls.fold</a> <span class=\"fn\">c</span>\n        <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">t</span> : <span class=\"fn\">τ</span>) =&gt; <span class=\"fn\">do\n          let acc ← <span class=\"fn\">acc</span>\n          <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">acc</span> <span class=\"fn\">t</span></span></span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\">LeanColls.fold</a> <span class=\"fn\">c</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">t</span> : <span class=\"fn\">τ</span>) =&gt; <span class=\"fn\">do\n      let acc ← <span class=\"fn\">acc</span>\n      <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">acc</span> <span class=\"fn\">t</span></span></span></span>)</span>\n    <span class=\"fn\">ma</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L151-L151","name":"LeanColls.Fold.ToList.foldM_eq_fold","line":151,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList.foldM_eq_fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList.foldM_eq_fold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">ToList</span>.<span class=\"name\">foldM_eq_fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.foldM\">LeanColls.foldM</a> <span class=\"fn\">c</span> <span class=\"fn\">f</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\">LeanColls.fold</a> <span class=\"fn\">c</span>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) =&gt; <span class=\"fn\">do\n      let x_1 ← <span class=\"fn\">acc</span>\n      <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x</span></span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">init</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L148-L148","name":"LeanColls.Fold.ToList.fold_eq_fold_toList","line":148,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList.fold_eq_fold_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList.fold_eq_fold_toList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">ToList</span>.<span class=\"name\">fold_eq_fold_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">τ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Perm\">List.Perm</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">β</span></span></span>) (<span class=\"fn\">init</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\">LeanColls.fold</a> <span class=\"fn\">c</span> <span class=\"fn\">f</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">L</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L147-L147","name":"LeanColls.Fold.ToList.mk","line":147,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">ToList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fold_eq_fold_toList : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">C</span>),\n  <span class=\"fn\">∃ (L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">τ</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Perm\">List.Perm</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∀ {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">β</span></span></span>) (<span class=\"fn\">init</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\">LeanColls.fold</a> <span class=\"fn\">c</span> <span class=\"fn\">f</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">L</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(foldM_eq_fold : <span class=\"fn\">∀ {<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_3</span>} {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>] (<span class=\"fn\">c</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)\n  (<span class=\"fn\">init</span> : <span class=\"fn\">β</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.foldM\">LeanColls.foldM</a> <span class=\"fn\">c</span> <span class=\"fn\">f</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\">LeanColls.fold</a> <span class=\"fn\">c</span>\n      <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) =&gt; <span class=\"fn\">do\n        let x_1 ← <span class=\"fn\">acc</span>\n        <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x</span></span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">init</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L147-L152","name":"LeanColls.Fold.ToList","line":147,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList","doc":"Correctness of `Fold` with respect to `ToList` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">ToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L137-L137","name":"LeanColls.Fold.foldM","line":137,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.foldM","doc":"monadic fold over the elements of `C` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.foldM\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L135-L135","name":"LeanColls.Fold.fold","line":135,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold","doc":"full (not early-terminating) fold over the elements of `C` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.fold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">β</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L133-L133","name":"LeanColls.Fold.mk","line":133,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fold : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w} → <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">β</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(foldM : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w} → <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] → <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L133-L139","name":"LeanColls.Fold","line":133,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Fold","doc":"`C` can be folded over, with element type `τ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) (w + 1))</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L122-L122","name":"LeanColls.Functor.ToList.toList_map","line":122,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList.toList_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList.toList_map\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Functor</span>.<span class=\"name\">ToList</span>.<span class=\"name\">toList_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ' : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ'</span></span>)</span> <span class=\"fn\">τ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList\">LeanColls.Functor.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span> <span class=\"fn\">τ'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L121-L121","name":"LeanColls.Functor.ToList.mk","line":121,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Functor</span>.<span class=\"name\">ToList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ' : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ'</span></span>)</span> <span class=\"fn\">τ'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toList_map : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ'</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList\">LeanColls.Functor.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span> <span class=\"fn\">τ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L121-L123","name":"LeanColls.Functor.ToList","line":121,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Functor.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Functor</span>.<span class=\"name\">ToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(τ : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ' : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">τ'</span></span>)</span> <span class=\"fn\">τ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L109-L109","name":"LeanColls.Append.ToList.toList_append","line":109,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList.toList_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList.toList_append\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Append</span>.<span class=\"name\">ToList</span>.<span class=\"name\">toList_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList\">LeanColls.Append.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c1 : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c2 : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c1</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L108-L108","name":"LeanColls.Append.ToList.mk","line":108,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Append</span>.<span class=\"name\">ToList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toList_append : <span class=\"fn\">∀ (<span class=\"fn\">c1 </span>c2 : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c1</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList\">LeanColls.Append.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L108-L110","name":"LeanColls.Append.ToList","line":108,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Append</span>.<span class=\"name\">ToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L100-L100","name":"LeanColls.Mem.ToList.mem_iff_mem_toList","line":100,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList.mem_iff_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList.mem_iff_mem_toList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToList</span>.<span class=\"name\">mem_iff_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L99-L99","name":"LeanColls.Mem.ToList.mk","line":99,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mem_iff_mem_toList : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L99-L101","name":"LeanColls.Mem.ToList","line":99,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L96-L96","name":"LeanColls.Mem.ToMultiset.mem_iff_mem_toMultiset","line":96,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset.mem_iff_mem_toMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset.mem_iff_mem_toMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">mem_iff_mem_toMultiset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset\">LeanColls.Mem.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L95-L95","name":"LeanColls.Mem.ToMultiset.mk","line":95,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mem_iff_mem_toMultiset : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset\">LeanColls.Mem.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L95-L97","name":"LeanColls.Mem.ToMultiset","line":95,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L92-L92","name":"LeanColls.Mem.ToFinset.mem_iff_mem_toFinset","line":92,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset.mem_iff_mem_toFinset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset.mem_iff_mem_toFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToFinset</span>.<span class=\"name\">mem_iff_mem_toFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset\">LeanColls.Mem.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.toFinset\">LeanColls.ToFinset.toFinset</a> <span class=\"fn\">cont</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L91-L91","name":"LeanColls.Mem.ToFinset.mk","line":91,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToFinset</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mem_iff_mem_toFinset : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.toFinset\">LeanColls.ToFinset.toFinset</a> <span class=\"fn\">cont</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset\">LeanColls.Mem.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L91-L93","name":"LeanColls.Mem.ToFinset","line":91,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToFinset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L79-L81","name":"LeanColls.ToList.sum","line":79,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList.sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.sum\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">τ₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L76-L77","name":"LeanColls.ToList.prod","line":76,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList.prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.prod\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C₂ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₁</span> <span class=\"fn\">τ₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C₂</span> <span class=\"fn\">τ₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L73-L74","name":"LeanColls.ToList.instLawfulToListInstToMultiset","line":73,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList.instLawfulToListInstToMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.instLawfulToListInstToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span>.<span class=\"name\">instLawfulToListInstToMultiset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList\">LeanColls.LawfulToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L70-L71","name":"LeanColls.ToList.instToMultiset","line":70,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList.instToMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.instToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span>.<span class=\"name\">instToMultiset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L64-L64","name":"LeanColls.LawfulToList.toMultiset_toList","line":64,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList.toMultiset_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList.toMultiset_toList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulToList</span>.<span class=\"name\">toMultiset_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList\">LeanColls.LawfulToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L62-L62","name":"LeanColls.LawfulToList.mk","line":62,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulToList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toMultiset_toList : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList\">LeanColls.LawfulToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L62-L64","name":"LeanColls.LawfulToList","line":62,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L59-L59","name":"LeanColls.ToList.toList","line":59,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L58-L58","name":"LeanColls.ToList.mk","line":58,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toList : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L58-L59","name":"LeanColls.ToList","line":58,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L55-L56","name":"LeanColls.instLawfulToMultisetInstToFinset","line":55,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.instLawfulToMultisetInstToFinset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.instLawfulToMultisetInstToFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">instLawfulToMultisetInstToFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset\">LeanColls.LawfulToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L52-L53","name":"LeanColls.instToFinset","line":52,"kind":"instance","docLink":"./LeanColls/Classes/Ops.html#LeanColls.instToFinset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.instToFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">instToFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L47-L47","name":"LeanColls.LawfulToMultiset.toFinset_toMultiset","line":47,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset.toFinset_toMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset.toFinset_toMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulToMultiset</span>.<span class=\"name\">toFinset_toMultiset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset\">LeanColls.LawfulToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Multiset.toFinset\">Multiset.toFinset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.toFinset\">LeanColls.ToFinset.toFinset</a> <span class=\"fn\">cont</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L45-L45","name":"LeanColls.LawfulToMultiset.mk","line":45,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulToMultiset</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFinset_toMultiset : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Multiset.toFinset\">Multiset.toFinset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.toFinset\">LeanColls.ToFinset.toFinset</a> <span class=\"fn\">cont</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset\">LeanColls.LawfulToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L45-L48","name":"LeanColls.LawfulToMultiset","line":45,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.LawfulToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulToMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L43-L43","name":"LeanColls.ToMultiset.toMultiset","line":43,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">toMultiset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L42-L42","name":"LeanColls.ToMultiset.mk","line":42,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToMultiset</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toMultiset : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\">LeanColls.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L42-L43","name":"LeanColls.ToMultiset","line":42,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset","doc":"`C` can be modeled as a multiset of `τ`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L39-L39","name":"LeanColls.ToFinset.toFinset","line":39,"kind":"def","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.toFinset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.toFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToFinset</span>.<span class=\"name\">toFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L38-L38","name":"LeanColls.ToFinset.mk","line":38,"kind":"ctor","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToFinset</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFinset : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\">LeanColls.ToFinset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Ops.lean#L38-L39","name":"LeanColls.ToFinset","line":38,"kind":"class","docLink":"./LeanColls/Classes/Ops.html#LeanColls.ToFinset","doc":"`C` can be modeled as a finset of `τ`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToFinset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToFinset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}