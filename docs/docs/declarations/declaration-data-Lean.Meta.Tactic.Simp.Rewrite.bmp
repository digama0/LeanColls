{"name":"Lean.Meta.Tactic.Simp.Rewrite","instances":[],"imports":["Init","Lean.Meta.ACLt","Lean.Meta.Match.MatchEqsExt","Lean.Meta.AppBuilder","Lean.Meta.SynthInstance","Lean.Meta.Tactic.UnifyEq","Lean.Meta.Tactic.Simp.Types","Lean.Meta.Tactic.LinearArith.Simp","Lean.Meta.Tactic.Simp.Simproc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L506-L510","name":"Lean.Meta.Simp.mkDefaultMethods","line":506,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkDefaultMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkDefaultMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkDefaultMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L503-L504","name":"Lean.Meta.Simp.mkDefaultMethodsCore","line":503,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkDefaultMethodsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkDefaultMethodsCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkDefaultMethodsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L497-L501","name":"Lean.Meta.Simp.mkMethods","line":497,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkMethods</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L495-L495","name":"Lean.Meta.Simp.Discharge","line":495,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Discharge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L473-L493","name":"Lean.Meta.Simp.dischargeDefault?","line":473,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeDefault?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeDefault?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dischargeDefault?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L458-L471","name":"Lean.Meta.Simp.dischargeEqnThmHypothesis?.go?","line":458,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeEqnThmHypothesis?.go?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeEqnThmHypothesis?.go?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dischargeEqnThmHypothesis?</span>.<span class=\"name\">go?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L449-L471","name":"Lean.Meta.Simp.dischargeEqnThmHypothesis?","line":449,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeEqnThmHypothesis?","doc":"Tries to solve `e` using `unifyEq?`.\nIt assumes that `isEqnThmHypothesis e` is `true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeEqnThmHypothesis?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dischargeEqnThmHypothesis?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L436-L443","name":"Lean.Meta.Simp.dischargeUsingAssumption?","line":436,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeUsingAssumption?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeUsingAssumption?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dischargeUsingAssumption?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L431-L434","name":"Lean.Meta.Simp.isEqnThmHypothesis.go","line":431,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.isEqnThmHypothesis.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.isEqnThmHypothesis.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">isEqnThmHypothesis</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L428-L434","name":"Lean.Meta.Simp.isEqnThmHypothesis","line":428,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.isEqnThmHypothesis","doc":"Return true if `e` is of the form `(x : α) → ... → s = t → ... → False`\n\nRecall that this kind of proposition is generated by Lean when creating equations for\nfunctions and match-expressions with overlapping cases.\nExample: the following `match`-expression has overlapping cases.\n```\ndef f (x y : Nat) :=\n  match x, y with\n  | Nat.succ n, Nat.succ m => ...\n  | _, _ => 0\n```\nThe second equation is of the form\n```\n(x y : Nat) → ((n m : Nat) → x = Nat.succ n → y = Nat.succ m → False) → f x y = 0\n```\nThe hypothesis `(n m : Nat) → x = Nat.succ n → y = Nat.succ m → False` is essentially\nsaying the first case is not applicable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.isEqnThmHypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">isEqnThmHypothesis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L401-L407","name":"Lean.Meta.Simp.postDefault","line":401,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.postDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.postDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">postDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L395-L399","name":"Lean.Meta.Simp.preDefault","line":395,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.preDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.preDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">preDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L377-L393","name":"Lean.Meta.Simp.simpGround","line":377,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpGround","doc":"Try to unfold ground term in the ground/symbolic evaluator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpGround\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpGround</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L361-L372","name":"Lean.Meta.Simp.seval","line":361,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.seval","doc":"Invoke ground/symbolic evaluator from `simp`.\nIt uses the `seval` theorems and simprocs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.seval\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">seval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L352-L355","name":"Lean.Meta.Simp.mkSEvalContext","line":352,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkSEvalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkSEvalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkSEvalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L344-L350","name":"Lean.Meta.Simp.mkSEvalMethods","line":344,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkSEvalMethods","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.mkSEvalMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkSEvalMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Lean.Meta.Simp.Methods</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L338-L342","name":"Lean.Meta.Simp.postSEval","line":338,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.postSEval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.postSEval\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">postSEval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L333-L336","name":"Lean.Meta.Simp.preSEval","line":333,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.preSEval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.preSEval\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">preSEval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L302-L331","name":"Lean.Meta.Simp.sevalGround","line":302,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.sevalGround","doc":"Try to unfold ground term in the ground/symbolic evaluator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.sevalGround\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">sevalGround</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L288-L297","name":"Lean.Meta.Simp.dischargeGround","line":288,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeGround","doc":"Discharge procedure for the ground/symbolic evaluator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.dischargeGround\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">dischargeGround</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L279-L283","name":"Lean.Meta.Simp.rewritePost","line":279,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewritePost","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewritePost\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">rewritePost</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rflOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L273-L277","name":"Lean.Meta.Simp.rewritePre","line":273,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewritePre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewritePre\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">rewritePre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(rflOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L260-L271","name":"Lean.Meta.Simp.simpMatch","line":260,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L252-L258","name":"Lean.Meta.Simp.simpMatchCore","line":252,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpMatchCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpMatchCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpMatchCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(matcherName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L220-L250","name":"Lean.Meta.Simp.simpMatchDiscrs?","line":220,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpMatchDiscrs?","doc":"Given a match-application `e` with `MatcherInfo` `info`, return `some result`\nif at least of one of the discriminants has been simplified.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpMatchDiscrs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpMatchDiscrs?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.MatcherInfo\">Lean.Meta.MatcherInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L199-L214","name":"Lean.Meta.Simp.simpArith","line":199,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpArith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpArith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L182-L197","name":"Lean.Meta.Simp.simpUsingDecide","line":182,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpUsingDecide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpUsingDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpUsingDecide</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L166-L180","name":"Lean.Meta.Simp.simpCtorEq","line":166,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpCtorEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.simpCtorEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpCtorEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L155-L156","name":"Lean.Meta.Simp.rewrite?.inErasedSet","line":155,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewrite?.inErasedSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewrite?.inErasedSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">rewrite?</span>.<span class=\"name\">inErasedSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(erased : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thm : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L141-L156","name":"Lean.Meta.Simp.rewrite?","line":141,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewrite?","doc":"Remark: the parameter tag is used for creating trace messages. It is irrelevant otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.rewrite?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">rewrite?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree\">Lean.Meta.SimpTheoremTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(erased : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tag : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rflOnly : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L121-L136","name":"Lean.Meta.Simp.tryTheorem?","line":121,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.tryTheorem?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.tryTheorem?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">tryTheorem?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thm : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L112-L119","name":"Lean.Meta.Simp.tryTheoremWithExtraArgs?","line":112,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.tryTheoremWithExtraArgs?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.tryTheoremWithExtraArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">tryTheoremWithExtraArgs?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thm : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numExtraArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L50-L60","name":"Lean.Meta.Simp.synthesizeArgs.synthesizeInstance","line":50,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.synthesizeArgs.synthesizeInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.synthesizeArgs.synthesizeInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">synthesizeArgs</span>.<span class=\"name\">synthesizeInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L17-L60","name":"Lean.Meta.Simp.synthesizeArgs","line":17,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.synthesizeArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.synthesizeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">synthesizeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(thmId : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Lean.Meta.Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bis : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}