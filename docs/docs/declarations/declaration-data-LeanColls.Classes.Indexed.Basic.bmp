{"name":"LeanColls.Classes.Indexed.Basic","instances":[],"imports":["Init","LeanColls.Classes.Bag","LeanColls.Classes.IndexType.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L131-L131","name":"LeanColls.LawfulIndexed.get_update","line":131,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span>)</span></span> else <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L128-L128","name":"LeanColls.LawfulIndexed.get_set","line":128,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">τ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\">a</span> else <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L123-L125","name":"LeanColls.LawfulIndexed.update_set_get","line":123,"kind":"theorem","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.update_set_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.update_set_get\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">update_set_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <a href=\"./Init/Prelude.html#False\">False</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L110-L113","name":"LeanColls.Indexed.get_update","line":110,"kind":"theorem","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">get_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span>)</span></span> else <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L103-L105","name":"LeanColls.Indexed.get_update_eq","line":103,"kind":"theorem","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_update_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_update_eq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">get_update_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L98-L101","name":"LeanColls.Indexed.get_set","line":98,"kind":"theorem","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">get_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">τ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\">a</span> else <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L91-L93","name":"LeanColls.Indexed.get_set_eq","line":91,"kind":"theorem","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_set_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get_set_eq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">get_set_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">τ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L81-L81","name":"LeanColls.LawfulIndexed.get_update_ne","line":81,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_update_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_update_ne\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_update_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L79-L79","name":"LeanColls.LawfulIndexed.get_update_eq","line":79,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_update_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_update_eq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_update_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L77-L77","name":"LeanColls.LawfulIndexed.get_set_ne","line":77,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_set_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_set_ne\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_set_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">τ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L75-L75","name":"LeanColls.LawfulIndexed.get_set_eq","line":75,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_set_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_set_eq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_set_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">ι</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">τ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L73-L73","name":"LeanColls.LawfulIndexed.get_ofFn","line":73,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.get_ofFn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">get_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.ofFn\">LeanColls.Indexed.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L72-L72","name":"LeanColls.LawfulIndexed.mk","line":72,"kind":"ctor","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(get_ofFn : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.ofFn\">LeanColls.Indexed.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get_set_eq : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) {<span class=\"fn\">i </span>j : <span class=\"fn\">ι</span>} {<span class=\"fn\">a</span> : <span class=\"fn\">τ</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get_set_ne : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) {<span class=\"fn\">i </span>j : <span class=\"fn\">ι</span>} {<span class=\"fn\">a</span> : <span class=\"fn\">τ</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\">LeanColls.Indexed.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get_update_eq : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">i </span>j : <span class=\"fn\">ι</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get_update_ne : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">i </span>j : <span class=\"fn\">ι</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\">LeanColls.Indexed.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\">LeanColls.Indexed.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\">LeanColls.LawfulIndexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L72-L82","name":"LeanColls.LawfulIndexed","line":72,"kind":"class","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.LawfulIndexed\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulIndexed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L47-L68","name":"LeanColls.Indexed.instOfIndexType","line":47,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.instOfIndexType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.instOfIndexType\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">instOfIndexType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/IndexType/Basic.html#LeanColls.IndexType\">LeanColls.IndexType</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(get : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ofFn : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(update : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L45-L45","name":"LeanColls.Indexed.withIdx","line":45,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.withIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.withIdx\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">withIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\">LeanColls.Indexed.WithIdx</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L40-L40","name":"LeanColls.Indexed.set","line":40,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set","doc":"Set the value of the function at an index "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L38-L38","name":"LeanColls.Indexed.update","line":38,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update","doc":"Apply a function at an index (often done in-place). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L36-L36","name":"LeanColls.Indexed.get","line":36,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get","doc":"Get the value of a collection at an index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.get\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">τ</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L34-L34","name":"LeanColls.Indexed.ofFn","line":34,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.ofFn","doc":"Form an instance of the collection type by\nspecifying its value at every index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.ofFn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L31-L31","name":"LeanColls.Indexed.toMultiBagWithIdx","line":31,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.toMultiBagWithIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.toMultiBagWithIdx\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">toMultiBagWithIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\">LeanColls.MultiBag.ReadOnly</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\">LeanColls.Indexed.WithIdx</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L27-L27","name":"LeanColls.Indexed.mk","line":27,"kind":"ctor","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toReadOnly : <span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\">LeanColls.MultiBag.ReadOnly</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toMultiBagWithIdx : <span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\">LeanColls.MultiBag.ReadOnly</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\">LeanColls.Indexed.WithIdx</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ofFn : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(update : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\">LeanColls.Indexed</a> <span class=\"fn\">C</span> <span class=\"fn\">ι</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L27-L41","name":"LeanColls.Indexed","line":27,"kind":"class","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag.ReadOnly\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span>.<span class=\"name\">ReadOnly</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (max u (u_1 + 1)) v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L25-L25","name":"LeanColls.Indexed.WithIdx.cont","line":25,"kind":"def","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx.cont","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx.cont\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">WithIdx</span>.<span class=\"name\">cont</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\">LeanColls.Indexed.WithIdx</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L24-L24","name":"LeanColls.Indexed.WithIdx.mk","line":24,"kind":"ctor","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">WithIdx</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\">LeanColls.Indexed.WithIdx</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Indexed/Basic.lean#L24-L25","name":"LeanColls.Indexed.WithIdx","line":24,"kind":"structure","docLink":"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx","doc":"An indexed collection `cont` can be reinterpreted as a\nmultibag of pairs `(i, cont[i])`.\n\nThis is similar to the `List.enum` operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Indexed/Basic.html#LeanColls.Indexed.WithIdx\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Indexed</span>.<span class=\"name\">WithIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}