{"name":"Std.Data.String.Lemmas","instances":[],"imports":["Init","Std.Data.Char","Std.Data.Nat.Lemmas","Std.Data.List.Lemmas","Std.Data.String.Basic","Std.Tactic.SeqFocus","Std.Tactic.Ext.Attr","Std.Tactic.Simpa"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1127-L1128","name":"String.data_dropWhile","line":1127,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.dropWhile\">String.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1124-L1125","name":"String.dropWhile_eq","line":1124,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.dropWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.dropWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.dropWhile\">String.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1121-L1122","name":"String.data_takeWhile","line":1121,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.takeWhile\">String.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1118-L1119","name":"String.takeWhile_eq","line":1118,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.takeWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.takeWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.takeWhile\">String.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1116-L1116","name":"String.data_take","line":1116,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_take\"><span class=\"name\">String</span>.<span class=\"name\">data_take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.take\">String.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1113-L1114","name":"String.take_eq","line":1113,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.take_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.take_eq\"><span class=\"name\">String</span>.<span class=\"name\">take_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.take\">String.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1111-L1111","name":"String.drop_empty","line":1111,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.drop_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.drop_empty\"><span class=\"name\">String</span>.<span class=\"name\">drop_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">&quot;&quot;</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1109-L1109","name":"String.data_drop","line":1109,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_drop\"><span class=\"name\">String</span>.<span class=\"name\">data_drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1106-L1107","name":"String.drop_eq","line":1106,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.drop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.drop_eq\"><span class=\"name\">String</span>.<span class=\"name\">drop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1095-L1097","name":"Substring.Valid.data_dropWhile","line":1095,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">Substring.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1092-L1093","name":"Substring.Valid.dropWhile","line":1092,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">Substring.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1088-L1090","name":"Substring.Valid.data_takeWhile","line":1088,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">Substring.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1085-L1086","name":"Substring.Valid.takeWhile","line":1085,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">Substring.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1082-L1083","name":"Substring.Valid.contains","line":1082,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.contains\">Substring.contains</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1079-L1080","name":"Substring.Valid.all","line":1079,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.all\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.all\">Substring.all</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1076-L1077","name":"Substring.Valid.any","line":1076,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.any\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.any\">Substring.any</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1073-L1074","name":"Substring.Valid.foldr","line":1073,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1070-L1071","name":"Substring.Valid.foldl","line":1070,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1061-L1068","name":"Substring.Valid.toString_extract","line":1061,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.toString_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.toString_extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toString_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.extract\">Substring.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1053-L1059","name":"Substring.Valid.extract","line":1053,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.extract\">Substring.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1050-L1051","name":"Substring.Valid.atEnd","line":1050,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">Substring.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1045-L1046","name":"Substring.Valid.data_take","line":1045,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.take\">Substring.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1042-L1043","name":"Substring.Valid.take","line":1042,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.take\">Substring.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1039-L1040","name":"Substring.Valid.data_drop","line":1039,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.drop\">Substring.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1036-L1037","name":"Substring.Valid.drop","line":1036,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.drop\">Substring.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1033-L1034","name":"Substring.Valid.front","line":1033,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.front\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.front\">Substring.front</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1027-L1031","name":"Substring.Valid.prevn","line":1027,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prevn\">Substring.prevn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span></span>)</span></span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1021-L1025","name":"Substring.Valid.nextn","line":1021,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span></span>)</span></span></span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1018-L1019","name":"Substring.Valid.nextn_stop","line":1018,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1012-L1016","name":"Substring.Valid.prev","line":1012,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prev\">Substring.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1009-L1010","name":"Substring.Valid.next_stop","line":1009,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L1003-L1007","name":"Substring.Valid.next","line":1003,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.next\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L998-L1001","name":"Substring.Valid.get","line":998,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.get\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.get\">Substring.get</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L995-L996","name":"Substring.Valid.isEmpty","line":995,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">Substring.isEmpty</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L992-L993","name":"Substring.Valid.bsize","line":992,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L989-L990","name":"String.valid_toSubstring","line":989,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.valid_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.valid_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">valid_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.toSubstring\">String.toSubstring</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L986-L987","name":"Substring.Valid.valid","line":986,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L974-L984","name":"Substring.Valid.validFor","line":974,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.validFor\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L961-L966","name":"Substring.ValidFor.dropWhile","line":961,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">Substring.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L954-L959","name":"Substring.ValidFor.takeWhile","line":954,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">Substring.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L951-L952","name":"Substring.ValidFor.contains","line":951,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.contains\">Substring.contains</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L948-L949","name":"Substring.ValidFor.all","line":948,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.all\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.all\">Substring.all</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L945-L946","name":"Substring.ValidFor.any","line":945,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.any\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.any\">Substring.any</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L942-L943","name":"Substring.ValidFor.foldr","line":942,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L939-L940","name":"Substring.ValidFor.foldl","line":939,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L924-L935","name":"Substring.ValidFor.extract","line":924,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ml : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mm : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mr : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">ml</span> <span class=\"fn\">mm</span> <span class=\"fn\">mr</span> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\">∃ (<span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l'</span> <span class=\"fn\">mm</span> <span class=\"fn\">r'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.extract\">Substring.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L921-L922","name":"Substring.ValidFor.atEnd","line":921,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">Substring.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L909-L917","name":"Substring.ValidFor.take","line":909,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.take\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.take\">Substring.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L899-L907","name":"Substring.ValidFor.drop","line":899,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.drop\">Substring.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L896-L897","name":"Substring.ValidFor.front","line":896,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.front\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.front\">Substring.front</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L885-L894","name":"Substring.ValidFor.prevn","line":885,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prevn\">Substring.prevn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span></span>)</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L873-L883","name":"Substring.ValidFor.nextn","line":873,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span></span>)</span></span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L869-L871","name":"Substring.ValidFor.nextn_stop","line":869,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L860-L867","name":"Substring.ValidFor.prev","line":860,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prev\">Substring.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L857-L858","name":"Substring.ValidFor.next_stop","line":857,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L846-L855","name":"Substring.ValidFor.next","line":846,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.next\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L843-L844","name":"Substring.ValidFor.get","line":843,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.get\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.get\">Substring.get</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L838-L841","name":"Substring.ValidFor.toIterator","line":838,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toIterator\">Substring.toIterator</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L835-L836","name":"Substring.ValidFor.toString","line":835,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L832-L833","name":"Substring.ValidFor.isEmpty","line":832,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">Substring.isEmpty</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L829-L830","name":"Substring.ValidFor.bsize","line":829,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L826-L827","name":"Substring.ValidFor.stopPos","line":826,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.stopPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.stopPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">stopPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L823-L824","name":"Substring.ValidFor.startPos","line":823,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.startPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.startPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L820-L821","name":"Substring.ValidFor.str","line":820,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.str\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.str</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L817-L818","name":"String.validFor_toSubstring","line":817,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.validFor_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.validFor_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">validFor_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.toSubstring\">String.toSubstring</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L810-L815","name":"Substring.ValidFor.of_eq","line":810,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.of_eq\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.str</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L807-L808","name":"Substring.ValidFor.valid","line":807,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L802-L803","name":"Substring.ValidFor.mk","line":802,"kind":"ctor","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.mk","doc":"The constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span>\n  <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>,\n    <span class=\"fn\">stopPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L801-L803","name":"Substring.ValidFor","line":801,"kind":"inductive","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor","doc":"A substring is represented by three lists `l m r`, where `m` is the middle section\n(the actual substring) and `l ++ m ++ r` is the underlying string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L797-L797","name":"Substring.Valid_default","line":797,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid_default\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid_default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">default</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L795-L795","name":"Substring.Valid.le","line":795,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.le","doc":"The stop position of a substring is at least the start. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.le\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L793-L793","name":"Substring.Valid.stopValid","line":793,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.stopValid","doc":"The stop position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.stopValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">stopValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L791-L791","name":"Substring.Valid.startValid","line":791,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.startValid","doc":"The start position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.startValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">startValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.startPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L789-L789","name":"Substring.Valid.mk","line":789,"kind":"ctor","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(startValid : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.startPos</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopValid : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L789-L795","name":"Substring.Valid","line":789,"kind":"structure","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid","doc":"Validity for a substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L784-L786","name":"Substring.prevn_zero","line":784,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.prevn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.prevn_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prevn\">Substring.prevn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L782-L782","name":"Substring.prev_zero","line":782,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.prev_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.prev_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prev\">Substring.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L765-L774","name":"String.takeWhileAux_of_valid","line":765,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.takeWhileAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.takeWhileAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">takeWhileAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\">Substring.takeWhileAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">p</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L757-L758","name":"String.map_eq","line":757,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.map_eq\"><span class=\"name\">String</span>.<span class=\"name\">map_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.map\">String.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L749-L755","name":"String.mapAux_of_valid","line":749,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.mapAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.mapAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mapAux\">String.mapAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L745-L746","name":"String.contains_iff","line":745,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.contains_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.contains_iff\"><span class=\"name\">String</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.contains\">String.contains</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L743-L743","name":"String.all_iff","line":743,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.all_iff\"><span class=\"name\">String</span>.<span class=\"name\">all_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.all\">String.all</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L740-L741","name":"String.all_eq","line":740,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.all_eq\"><span class=\"name\">String</span>.<span class=\"name\">all_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.all\">String.all</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L738-L738","name":"String.any_iff","line":738,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.any_iff\"><span class=\"name\">String</span>.<span class=\"name\">any_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.any\">String.any</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L735-L736","name":"String.any_eq","line":735,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.any_eq\"><span class=\"name\">String</span>.<span class=\"name\">any_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.any\">String.any</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L725-L733","name":"String.anyAux_of_valid","line":725,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.anyAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.anyAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">anyAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.anyAux\">String.anyAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">p</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\">m</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L721-L722","name":"String.foldr_eq","line":721,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldr_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldr_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldr\">String.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L711-L719","name":"String.foldrAux_of_valid","line":711,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldrAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldrAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldrAux\">String.foldrAux</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L707-L708","name":"String.foldl_eq","line":707,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldl_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldl\">String.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L698-L705","name":"String.foldlAux_of_valid","line":698,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldlAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldlAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldlAux\">String.foldlAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L694-L695","name":"String.offsetOfPos_of_valid","line":694,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.offsetOfPos_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.offsetOfPos_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.offsetOfPos\">String.offsetOfPos</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L683-L692","name":"String.offsetOfPosAux_of_valid","line":683,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\">String.offsetOfPosAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L675-L677","name":"String.Iterator.Valid.prevn","line":675,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">String.Iterator.prevn</a> <span class=\"fn\">it</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L671-L673","name":"String.Iterator.Valid.remainingToString","line":671,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">String.Iterator.remainingToString</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L669-L669","name":"String.Iterator.Valid.toEnd","line":669,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">String.Iterator.toEnd</a> <span class=\"fn\">it</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L664-L667","name":"String.Iterator.Valid.setCurr","line":664,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">String.Iterator.setCurr</a> <span class=\"fn\">it</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L658-L662","name":"String.Iterator.Valid.prev","line":658,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">String.Iterator.prev</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L652-L656","name":"String.Iterator.Valid.next","line":652,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">it</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L649-L650","name":"String.Iterator.Valid.remainingBytes_le","line":649,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingBytes_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">String.Iterator.remainingBytes</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\"><span class=\"fn\">it</span>.s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L647-L647","name":"String.valid_mkIterator","line":647,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.valid_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.valid_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">valid_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mkIterator\">String.mkIterator</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L643-L645","name":"String.Iterator.Valid.validFor","line":643,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.validFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L631-L637","name":"String.Iterator.ValidFor.prevn","line":631,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span></span> →\n      <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">String.Iterator.prevn</a> <span class=\"fn\">it</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L623-L629","name":"String.Iterator.ValidFor.nextn","line":623,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">r</span></span></span> →\n      <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">String.Iterator.nextn</a> <span class=\"fn\">it</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L619-L621","name":"String.Iterator.ValidFor.remainingToString","line":619,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">String.Iterator.remainingToString</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L613-L617","name":"String.Iterator.ValidFor.extract","line":613,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it₁ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it₂ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">it₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">it₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.extract\">String.Iterator.extract</a> <span class=\"fn\">it₁</span> <span class=\"fn\">it₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L609-L611","name":"String.Iterator.ValidFor.toEnd'","line":609,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.data</span></span>)</span> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">String.Iterator.toEnd</a> <span class=\"fn\">it</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L605-L607","name":"String.Iterator.ValidFor.toEnd","line":605,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">String.Iterator.toEnd</a> <span class=\"fn\">it</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L602-L603","name":"String.Iterator.ValidFor.setCurr","line":602,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">String.Iterator.setCurr</a> <span class=\"fn\">it</span> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L593-L600","name":"String.Iterator.ValidFor.setCurr'","line":593,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">String.Iterator.setCurr</a> <span class=\"fn\">it</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L590-L591","name":"String.Iterator.ValidFor.hasPrev","line":590,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\">String.Iterator.hasPrev</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L587-L588","name":"String.Iterator.ValidFor.hasNext","line":587,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasNext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L582-L585","name":"String.Iterator.ValidFor.atEnd","line":582,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\">String.Iterator.atEnd</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L579-L580","name":"String.Iterator.ValidFor.prev_nil","line":579,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">String.Iterator.prev</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L572-L577","name":"String.Iterator.ValidFor.prev","line":572,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">String.Iterator.prev</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L566-L570","name":"String.Iterator.ValidFor.next","line":566,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L563-L564","name":"String.Iterator.ValidFor.curr","line":563,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">curr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.curr\">String.Iterator.curr</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">r</span> <span class=\"fn\">default</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L559-L561","name":"String.Iterator.ValidFor.pos_eq_endPos","line":559,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\"><span class=\"fn\">it</span>.s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L556-L557","name":"String.Iterator.ValidFor.pos_eq_zero","line":556,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L553-L554","name":"String.Iterator.ValidFor.pos","line":553,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L550-L551","name":"String.Iterator.ValidFor.toString","line":550,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L547-L548","name":"String.Iterator.ValidFor.remainingBytes","line":547,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">String.Iterator.remainingBytes</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L545-L545","name":"String.validFor_mkIterator","line":545,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.validFor_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.validFor_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">validFor_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mkIterator\">String.mkIterator</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L542-L543","name":"String.Iterator.ValidFor.of_eq","line":542,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L539-L540","name":"String.Iterator.ValidFor.mk'","line":539,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span>\n  <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L536-L537","name":"String.Iterator.ValidFor.out'","line":536,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\"><span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span> }</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L533-L534","name":"String.Iterator.ValidFor.out","line":533,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L530-L531","name":"String.Iterator.ValidFor.valid","line":530,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L523-L524","name":"String.Iterator.ValidFor.mk","line":523,"kind":"ctor","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk","doc":"The canonical constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L522-L524","name":"String.Iterator.ValidFor","line":522,"kind":"inductive","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor","doc":"`it.ValidFor l r` means that `it` is a string iterator whose underlying string is\n`l.reverse ++ r`, and where the cursor is pointing at the end of `l.reverse`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L518-L518","name":"String.Iterator.Valid","line":518,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid","doc":"Validity for a string iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L513-L515","name":"String.Iterator.hasNext_cons_addChar","line":513,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L510-L511","name":"String.Iterator.forward_eq_nextn","line":510,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward_eq_nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.forward\">String.Iterator.forward</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">String.Iterator.nextn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L505-L506","name":"String.append_assoc","line":505,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.append_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.append_assoc\"><span class=\"name\">String</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₃ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L503-L503","name":"String.nil_append","line":503,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.nil_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.nil_append\"><span class=\"name\">String</span>.<span class=\"name\">nil_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L501-L501","name":"String.append_nil","line":501,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.append_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.append_nil\"><span class=\"name\">String</span>.<span class=\"name\">append_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L499-L499","name":"String.data_singleton","line":499,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_singleton\"><span class=\"name\">String</span>.<span class=\"name\">data_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">c</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L497-L497","name":"String.singleton_eq","line":497,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.singleton_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.singleton_eq\"><span class=\"name\">String</span>.<span class=\"name\">singleton_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">[<span class=\"fn\">c</span>]</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L494-L495","name":"String.data_join","line":494,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_join\"><span class=\"name\">String</span>.<span class=\"name\">data_join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">String.join</a> <span class=\"fn\">ss</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L490-L492","name":"String.join_eq.go","line":490,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.join_eq.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.join_eq.go\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L489-L492","name":"String.join_eq","line":489,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.join_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.join_eq\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">String.join</a> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span></span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L484-L485","name":"String.toString_toSubstring","line":484,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.toString_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.toString_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">toString_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.toSubstring\">String.toSubstring</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L479-L480","name":"String.split_of_valid","line":479,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.split_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.split_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">split_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.split\">String.split</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">String.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.splitOnP\">List.splitOnP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L466-L477","name":"String.splitAux_of_valid","line":466,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.splitAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.splitAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">splitAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.splitAux\">String.splitAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">String.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.splitOnP.go\">List.splitOnP.go</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L458-L464","name":"String.extract_of_valid","line":458,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">extract_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L452-L456","name":"String.extract_zero_endPos","line":452,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract_zero_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract_zero_endPos\"><span class=\"name\">String</span>.<span class=\"name\">extract_zero_endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L447-L450","name":"String.extract_cons_addChar","line":447,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L443-L445","name":"String.extract.go₁_zero_utf8Len","line":443,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_zero_utf8Len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L436-L441","name":"String.extract.go₁_append_right","line":436,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_append_right\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_append_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">t</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L431-L434","name":"String.extract.go₁_cons_addChar","line":431,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">cs</span> <span class=\"fn\">0</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L418-L429","name":"String.extract.go₁_add_right_cancel","line":418,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L411-L416","name":"String.extract.go₂_append_left","line":411,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₂_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₂_append_left\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_append_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L401-L409","name":"String.extract.go₂_add_right_cancel","line":401,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L396-L399","name":"String.firstDiffPos_eq","line":396,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.firstDiffPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.firstDiffPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos\">String.firstDiffPos</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span>)</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span>)</span>.fst</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L369-L394","name":"String.firstDiffPos_loop_eq","line":369,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.firstDiffPos_loop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.firstDiffPos_loop_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_loop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₁ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₂ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstop : <span class=\"fn\"><span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r₁</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r₂</span></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\">String.firstDiffPos.loop</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₁</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">stop</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span>)</span></span></span>)</span> <span class=\"fn\">r₁</span> <span class=\"fn\">r₂</span></span>)</span>.fst</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L365-L367","name":"String.revFind_of_valid","line":365,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revFind_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revFind_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFind_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFind\">String.revFind</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">x</span></span> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.tail?\">List.tail?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L354-L363","name":"String.revFindAux_of_valid","line":354,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revFindAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revFindAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFindAux\">String.revFindAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">x</span></span> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.tail?\">List.tail?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L350-L351","name":"String.find_of_valid","line":350,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.find_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.find_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">find_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.find\">String.find</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L336-L348","name":"String.findAux_of_valid","line":336,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.findAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.findAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">findAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.findAux\">String.findAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">m</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L333-L333","name":"String.revPosOf_eq","line":333,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revPosOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revPosOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revPosOf\">String.revPosOf</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFind\">String.revFind</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L331-L331","name":"String.revPosOfAux_eq","line":331,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revPosOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revPosOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revPosOfAux\">String.revPosOfAux</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFindAux\">String.revFindAux</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L329-L329","name":"String.posOf_eq","line":329,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.posOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.posOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.posOf\">String.posOf</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.find\">String.find</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L327-L327","name":"String.posOfAux_eq","line":327,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.posOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.posOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.posOfAux\">String.posOfAux</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.findAux\">String.findAux</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L325-L325","name":"String.next'_eq","line":325,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.next'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.next'_eq\"><span class=\"name\">String</span>.<span class=\"name\">next'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next'\">String.next'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L323-L323","name":"String.get'_eq","line":323,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get'_eq\"><span class=\"name\">String</span>.<span class=\"name\">get'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get'\">String.get'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L318-L321","name":"String.atEnd_of_valid","line":318,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.atEnd_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.atEnd_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L313-L316","name":"String.back_eq","line":313,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.back_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.back_eq\"><span class=\"name\">String</span>.<span class=\"name\">back_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.back\">String.back</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.getLastD\">List.getLastD</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L310-L311","name":"String.front_eq","line":310,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.front_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.front_eq\"><span class=\"name\">String</span>.<span class=\"name\">front_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.front\">String.front</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L308-L308","name":"String.prev_zero","line":308,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.prev_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.prev_zero\"><span class=\"name\">String</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L302-L306","name":"String.prev_of_valid'","line":302,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.prev_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.prev_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropLast\">List.dropLast</a> <span class=\"fn\">cs</span></span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L297-L300","name":"String.prev_of_valid","line":297,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.prev_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.prev_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L285-L295","name":"String.utf8PrevAux_of_valid","line":285,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8PrevAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8PrevAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">String.utf8PrevAux</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L278-L283","name":"String.valid_next","line":278,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.valid_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.valid_next\"><span class=\"name\">String</span>.<span class=\"name\">valid_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L275-L276","name":"String.atEnd_iff","line":275,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.atEnd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.atEnd_iff\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L273-L273","name":"String.lt_next'","line":273,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.lt_next'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.lt_next'\"><span class=\"name\">String</span>.<span class=\"name\">lt_next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L270-L271","name":"String.next_of_valid","line":270,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.next_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.next_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L266-L268","name":"String.next_of_valid'","line":266,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.next_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.next_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">cs'</span> <span class=\"fn\">default</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L262-L264","name":"String.modify_of_valid","line":262,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.modify_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.modify_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">modify_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.modify\">String.modify</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">f</span> <span class=\"fn\">cs'</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L258-L260","name":"String.set_of_valid","line":258,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.set_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.set_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">set_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.set\">String.set</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span></span>)</span> <span class=\"fn\">cs'</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L247-L256","name":"String.utf8SetAux_of_valid","line":247,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8SetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8SetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span></span>)</span> <span class=\"fn\">cs'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L245-L245","name":"String.get!_eq_get","line":245,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get!_eq_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get!_eq_get\"><span class=\"name\">String</span>.<span class=\"name\">get!_eq_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get!\">String.get!</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L242-L243","name":"String.get?_of_valid","line":242,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get?\">String.get?</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head?\">List.head?</a> <span class=\"fn\">cs'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L231-L240","name":"String.utf8GetAux?_of_valid","line":231,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\">String.utf8GetAux?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head?\">List.head?</a> <span class=\"fn\">cs'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L227-L229","name":"String.get_cons_addChar","line":227,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">get_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L224-L225","name":"String.get_of_valid","line":224,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">cs'</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L213-L222","name":"String.utf8GetAux_of_valid","line":213,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">cs'</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L210-L211","name":"String.utf8GetAux_addChar_right_cancel","line":210,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_addChar_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L199-L208","name":"String.utf8GetAux_add_right_cancel","line":199,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L186-L197","name":"String.utf8InductionOn","line":186,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.utf8InductionOn","doc":"Induction along the valid positions in a list of characters.\n(This definition is intended only for specification purposes.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8InductionOn\"><span class=\"name\">String</span>.<span class=\"name\">utf8InductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./foundational_types.html\">Sort</a> u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span> <span class=\"fn\">p</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ind : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">cs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span> <span class=\"fn\">i</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L179-L180","name":"String.isEmpty_iff","line":179,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.isEmpty_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.isEmpty_iff\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.isEmpty\">String.isEmpty</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L176-L177","name":"String.endPos_eq_zero","line":176,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.endPos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.endPos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L171-L172","name":"String.Pos.Valid.le_endPos","line":171,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.Valid.le_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid.le_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L169-L169","name":"String.Pos.Valid.mk","line":169,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid.mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L167-L167","name":"String.Pos.valid_endPos","line":167,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.valid_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.valid_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L165-L165","name":"String.Pos.valid_zero","line":165,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.valid_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.valid_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L162-L163","name":"String.Pos.Valid","line":162,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.Pos.Valid","doc":"A string position is valid if it is equal to the UTF-8 length of an initial substring of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L159-L159","name":"String.Pos.mk_lt_mk","line":159,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_lt_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_lt_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_lt_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> }</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L157-L157","name":"String.Pos.lt_iff","line":157,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L155-L155","name":"String.Pos.mk_le_mk","line":155,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_le_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_le_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> }</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L153-L153","name":"String.Pos.le_iff","line":153,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.le_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L150-L151","name":"String.Pos.zero_addString_eq","line":150,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L144-L145","name":"String.Pos.zero_addString_byteIdx","line":144,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L142-L142","name":"String.Pos.addString_eq","line":142,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L139-L140","name":"String.Pos.addString_byteIdx","line":139,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addString_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L137-L137","name":"String.Pos.ne_of_gt","line":137,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ne_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ne_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L135-L135","name":"String.Pos.ne_of_lt","line":135,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ne_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L133-L133","name":"String.Pos.lt_addChar","line":133,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.lt_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.lt_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L128-L131","name":"String.Pos.addChar_right_comm","line":128,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addChar_right_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addChar_right_comm\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_right_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L126-L126","name":"String.Pos.zero_addChar_eq","line":126,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L123-L124","name":"String.Pos.zero_addChar_byteIdx","line":123,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L121-L121","name":"String.Pos.addChar_eq","line":121,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addChar_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L119-L119","name":"String.Pos.addChar_byteIdx","line":119,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addChar_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L117-L117","name":"String.Pos.sub_eq","line":117,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.sub_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.sub_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">sub_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L115-L115","name":"String.Pos.sub_byteIdx","line":115,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.sub_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.sub_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">sub_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p₂</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L113-L113","name":"String.Pos.add_eq","line":113,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.add_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">add_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L111-L111","name":"String.Pos.add_byteIdx","line":111,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.add_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.add_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">add_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p₂</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L109-L109","name":"String.Pos.ext_iff","line":109,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L106-L107","name":"String.Pos.ext","line":106,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ext\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L104-L104","name":"String.Pos.mk_byteIdx","line":104,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L102-L102","name":"String.Pos.mk_zero","line":102,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">0</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L100-L100","name":"String.Pos.byteIdx_mk","line":100,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">n</span> }</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L98-L98","name":"String.Pos.byteIdx_zero","line":98,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L94-L94","name":"String.endPos_eq","line":94,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.endPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.endPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L90-L91","name":"String.utf8Len_le_of_prefix","line":90,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_prefix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Std/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L87-L88","name":"String.utf8Len_le_of_suffix","line":87,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_suffix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Std/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L84-L85","name":"String.utf8Len_le_of_infix","line":84,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_infix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Std/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L79-L82","name":"String.utf8Len_le_of_sublist","line":79,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_sublist\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Sublist\">List.Sublist</a> <span class=\"fn\">cs₁</span> <span class=\"fn\">cs₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L74-L75","name":"String.utf8Len_eq_zero","line":74,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L72-L72","name":"String.utf8Len_reverse","line":72,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_reverse\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">cs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L68-L70","name":"String.utf8Len_reverseAux","line":68,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_reverseAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_reverseAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverseAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">cs₁</span> <span class=\"fn\">cs₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L65-L66","name":"String.utf8Len_append","line":65,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_append\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L63-L63","name":"String.utf8Len_cons","line":63,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L61-L61","name":"String.utf8Len_nil","line":61,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_nil\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L59-L59","name":"String.utf8ByteSize_mk","line":59,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8ByteSize_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8ByteSize_mk\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L57-L57","name":"String.utf8ByteSize.go_eq","line":57,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8ByteSize.go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8ByteSize.go_eq\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize</span>.<span class=\"name\">go_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L55-L55","name":"String.utf8Len","line":55,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len","doc":"The UTF-8 byte length of a list of characters. (This is intended for specification purposes.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L43-L43","name":"String.lt_iff","line":43,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L39-L39","name":"String.data_append","line":39,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_append\"><span class=\"name\">String</span>.<span class=\"name\">data_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">t</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L37-L37","name":"String.data_push","line":37,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_push\"><span class=\"name\">String</span>.<span class=\"name\">data_push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.push\">String.push</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">c</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L33-L35","name":"String.length_push","line":33,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.length_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.length_push\"><span class=\"name\">String</span>.<span class=\"name\">length_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.push\">String.push</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L31-L31","name":"String.length_singleton","line":31,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.length_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.length_singleton\"><span class=\"name\">String</span>.<span class=\"name\">length_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L29-L29","name":"String.length_empty","line":29,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.length_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.length_empty\"><span class=\"name\">String</span>.<span class=\"name\">length_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L27-L27","name":"String.mk_length","line":27,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.mk_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.mk_length\"><span class=\"name\">String</span>.<span class=\"name\">mk_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">s</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L25-L25","name":"String.str_eq","line":25,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.str_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.str_eq\"><span class=\"name\">String</span>.<span class=\"name\">str_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.str\">String.str</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.push\">String.push</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L23-L23","name":"String.default_eq","line":23,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.default_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.default_eq\"><span class=\"name\">String</span>.<span class=\"name\">default_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L21-L21","name":"String.ext_iff","line":21,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L18-L19","name":"String.ext","line":18,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.ext\"><span class=\"name\">String</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.data</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/String/Lemmas.lean#L14-L14","name":"Char.length_toString","line":14,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Char.length_toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Char.length_toString\"><span class=\"name\">Char</span>.<span class=\"name\">length_toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Char.toString\">Char.toString</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"}]}