{"name":"LeanColls.Classes.Seq","instances":[{"typeNames":["List"],"name":"List.instSeqList","className":"LeanColls.Seq"},{"typeNames":["List"],"name":"List.instLawfulSeqListInstSeqList","className":"LeanColls.LawfulSeq"}],"imports":["Init","LeanColls.Classes.Ops","LeanColls.Data.List","Mathlib.Data.List.OfFn"],"declarations":[{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L283-L289","name":"LeanColls.Seq.get_update","line":283,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> then\n    <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span></span>)</span></span>\n  else <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L268-L281","name":"LeanColls.Seq.get_update_ne","line":268,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_update_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_update_ne\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_update_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L253-L265","name":"LeanColls.Seq.get_update_eq","line":253,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_update_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_update_eq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_update_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L247-L250","name":"LeanColls.Seq.get_set","line":247,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> then <span class=\"fn\">x</span>\n  else <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L235-L245","name":"LeanColls.Seq.get_set_ne","line":235,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_set_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_set_ne\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_set_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span>)</span> <span class=\"fn\">j</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L223-L232","name":"LeanColls.Seq.get_set_eq","line":223,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_set_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_set_eq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_set_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L210-L218","name":"LeanColls.Seq.get_ofFn","line":210,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get_ofFn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L206-L208","name":"LeanColls.Seq.size_ofFn","line":206,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_ofFn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L202-L204","name":"LeanColls.Seq.size_singleton","line":202,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_singleton\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.singleton\">LeanColls.singleton</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L198-L200","name":"LeanColls.Seq.size_append","line":198,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_append\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c1 : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c2 : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">c1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">c2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L194-L196","name":"LeanColls.Seq.size_snoc","line":194,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_snoc\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc\">LeanColls.Seq.snoc</a> <span class=\"fn\">cont</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L190-L192","name":"LeanColls.Seq.size_cons","line":190,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_cons\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons\">LeanColls.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L186-L188","name":"LeanColls.Seq.size_update","line":186,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L182-L184","name":"LeanColls.Seq.size_set","line":182,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.size_set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">size_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L121-L143","name":"List.instLawfulSeqListInstSeqList","line":121,"kind":"instance","docLink":"./LeanColls/Classes/Seq.html#List.instLawfulSeqListInstSeqList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#List.instLawfulSeqListInstSeqList\"><span class=\"name\">List</span>.<span class=\"name\">instLawfulSeqListInstSeqList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L114-L114","name":"LeanColls.LawfulSeq.getSnoc?_eq_some","line":114,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getSnoc?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getSnoc?_eq_some\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">getSnoc?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c' : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getSnoc?\">LeanColls.Seq.getSnoc?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">c'</span>, <span class=\"fn\">x</span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Data/List.html#List.snoc\">List.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c'</span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L112-L112","name":"LeanColls.LawfulSeq.getSnoc?_eq_none","line":112,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getSnoc?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getSnoc?_eq_none\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">getSnoc?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getSnoc?\">LeanColls.Seq.getSnoc?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L110-L110","name":"LeanColls.LawfulSeq.toList_snoc","line":110,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_snoc\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">toList_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc\">LeanColls.Seq.snoc</a> <span class=\"fn\">cont</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc\">LeanColls.Seq.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L108-L108","name":"LeanColls.LawfulSeq.getCons?_eq_some","line":108,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getCons?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getCons?_eq_some\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">getCons?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c' : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getCons?\">LeanColls.Seq.getCons?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">c'</span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L106-L106","name":"LeanColls.LawfulSeq.getCons?_eq_none","line":106,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getCons?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.getCons?_eq_none\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">getCons?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getCons?\">LeanColls.Seq.getCons?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L104-L104","name":"LeanColls.LawfulSeq.toList_cons","line":104,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_cons\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">toList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons\">LeanColls.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons\">LeanColls.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L102-L102","name":"LeanColls.LawfulSeq.toList_update","line":102,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">toList_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L100-L100","name":"LeanColls.LawfulSeq.toList_set","line":100,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">toList_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L98-L98","name":"LeanColls.LawfulSeq.get_def","line":98,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.get_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.get_def\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">get_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L96-L96","name":"LeanColls.LawfulSeq.toList_ofFn","line":96,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.toList_ofFn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">toList_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L94-L94","name":"LeanColls.LawfulSeq.size_def","line":94,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.size_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.size_def\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">size_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L86-L86","name":"LeanColls.LawfulSeq.mk","line":86,"kind":"ctor","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToList : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\">LeanColls.Mem.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToList_1 : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList\">LeanColls.Append.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToMultiset : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\">LeanColls.Insert.ToMultiset</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToList_2 : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\">LeanColls.Fold.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(size_def : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toList_ofFn : <span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">τ</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\">LeanColls.Seq.ofFn</a> <span class=\"fn\">f</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get_def : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\">LeanColls.Seq.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toList_set : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\">LeanColls.Seq.set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toList_update : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">cont</span> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\">LeanColls.Seq.update</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toList_cons : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons\">LeanColls.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">cont</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons\">LeanColls.Seq.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getCons?_eq_none : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getCons?\">LeanColls.Seq.getCons?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getCons?_eq_some : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">c'</span> : <span class=\"fn\">C</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getCons?\">LeanColls.Seq.getCons?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">c'</span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c'</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toList_snoc : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc\">LeanColls.Seq.snoc</a> <span class=\"fn\">cont</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc\">LeanColls.Seq.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span>)</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getSnoc?_eq_none : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getSnoc?\">LeanColls.Seq.getSnoc?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getSnoc?_eq_some : <span class=\"fn\">∀ (<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">τ</span>) (<span class=\"fn\">c'</span> : <span class=\"fn\">C</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getSnoc?\">LeanColls.Seq.getSnoc?</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">c'</span>, <span class=\"fn\">x</span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">cont</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanColls/Data/List.html#List.snoc\">List.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">c'</span></span>)</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\">LeanColls.LawfulSeq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L86-L115","name":"LeanColls.LawfulSeq","line":86,"kind":"class","docLink":"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.LawfulSeq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">LawfulSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Mem.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ToList</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Append.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Append</span>.<span class=\"name\">ToList</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert.ToMultiset\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span>.<span class=\"name\">ToMultiset</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span>.<span class=\"name\">ToList</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L80-L80","name":"List.toMultiset_eq","line":80,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#List.toMultiset_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#List.toMultiset_eq\"><span class=\"name\">List</span>.<span class=\"name\">toMultiset_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToMultiset.toMultiset\">LeanColls.ToMultiset.toMultiset</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L79-L79","name":"List.size_nil","line":79,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#List.size_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#List.size_nil\"><span class=\"name\">List</span>.<span class=\"name\">size_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L78-L78","name":"List.size_cons","line":78,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#List.size_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#List.size_cons\"><span class=\"name\">List</span>.<span class=\"name\">size_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L77-L77","name":"List.toList_eq","line":77,"kind":"theorem","docLink":"./LeanColls/Classes/Seq.html#List.toList_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#List.toList_eq\"><span class=\"name\">List</span>.<span class=\"name\">toList_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList.toList\">LeanColls.toList</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L62-L75","name":"List.instSeqList","line":62,"kind":"instance","docLink":"./LeanColls/Classes/Seq.html#List.instSeqList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#List.instSeqList\"><span class=\"name\">List</span>.<span class=\"name\">instSeqList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">τ</span></span>)</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L48-L48","name":"LeanColls.Seq.getSnoc?","line":48,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.getSnoc?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getSnoc?\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">getSnoc?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L47-L47","name":"LeanColls.Seq.snoc","line":47,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.snoc\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L40-L40","name":"LeanColls.Seq.getCons?","line":40,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.getCons?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.getCons?\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">getCons?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L39-L39","name":"LeanColls.Seq.cons","line":39,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.cons\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L34-L34","name":"LeanColls.Seq.update","line":34,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.update\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L33-L33","name":"LeanColls.Seq.set","line":33,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L32-L32","name":"LeanColls.Seq.get","line":32,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.get\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span> → <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L31-L31","name":"LeanColls.Seq.ofFn","line":31,"kind":"def","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.ofFn\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{sz : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">sz</span></span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L22-L22","name":"LeanColls.Seq.mk","line":22,"kind":"ctor","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toFold : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\">LeanColls.Fold</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toInsert : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\">LeanColls.Insert</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toToList : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\">LeanColls.ToList</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMembership : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">τ</span> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toSize : <span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\">LeanColls.Size</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toAppend : <span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ofFn : <span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">sz</span></span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get : <span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span> → <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(update : <span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\">C</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Ops.html#LeanColls.Size.size\">LeanColls.size</a> <span class=\"fn\">cont</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cons : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getCons? : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">C</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(getSnoc? : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\">LeanColls.Seq</a> <span class=\"fn\">C</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Seq.lean#L22-L54","name":"LeanColls.Seq","line":22,"kind":"class","docLink":"./LeanColls/Classes/Seq.html#LeanColls.Seq","doc":"A collection which is ordered (i.e. isomorphic to [List]). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Seq.html#LeanColls.Seq\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Fold\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Fold</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Insert\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Insert</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.ToList\"><span class=\"name\">LeanColls</span>.<span class=\"name\">ToList</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/Prelude.html#Membership\"><span class=\"name\">Membership</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Ops.html#LeanColls.Size\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Size</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Init/Prelude.html#Append\"><span class=\"name\">Append</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) (v + 1))</div></div>"}]}