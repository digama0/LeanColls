{"name":"Lean.Elab.Tactic.Simp","instances":[{"typeNames":["Lean.Elab.Tactic.SimpKind"],"name":"Lean.Elab.Tactic.instInhabitedSimpKind","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.SimpKind"],"name":"Lean.Elab.Tactic.instBEqSimpKind","className":"BEq"}],"imports":["Init","Lean.Meta.Tactic.Simp","Lean.Meta.Tactic.Replace","Lean.Elab.BuiltinNotation","Lean.Elab.Tactic.Basic","Lean.Elab.Tactic.ElabTerm","Lean.Elab.Tactic.Location","Lean.Elab.Tactic.Config"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L435-L437","name":"Lean.Elab.Tactic.evalDSimp","line":435,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalDSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L426-L433","name":"Lean.Elab.Tactic.dsimpLocation.go","line":426,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarIdsToSimp : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simplifyTarget : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L416-L433","name":"Lean.Elab.Tactic.dsimpLocation","line":416,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(loc : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Lean.Elab.Tactic.Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L407-L414","name":"Lean.Elab.Tactic.evalSimpAll","line":407,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimpAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L400-L405","name":"Lean.Elab.Tactic.evalSimp","line":400,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L388-L394","name":"Lean.Elab.Tactic.simpLocation.go","line":388,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpLocation</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarIdsToSimp : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simplifyTarget : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L378-L394","name":"Lean.Elab.Tactic.simpLocation","line":378,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation","doc":"`simpLocation ctx discharge? varIdToLemmaId loc`\nruns the simplifier at locations specified by `loc`,\nusing the simp theorems collected in `ctx`\noptionally running a discharger specified in `discharge?` on generated subgoals.\n\nIts primary use is as the implementation of the\n`simp [...] at ...` and `simp only [...] at ...` syntaxes,\nbut can also be used by other tactics when a `Syntax` is not available.\n\nFor many tactics other than the simplifier,\none should use the `withLocation` tactic combinator\nwhen working with a `location`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpLocation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(loc : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Lean.Elab.Tactic.Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L361-L362","name":"Lean.Elab.Tactic.traceSimpCall","line":361,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">traceSimpCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usedSimps : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L308-L359","name":"Lean.Elab.Tactic.mkSimpOnly","line":308,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpOnly","doc":"If `stx` is the syntax of a `simp`, `simp_all` or `dsimp` tactic invocation, and\n`usedSimps` is the set of simp lemmas used by this invocation, then `mkSimpOnly`\ncreates the syntax of an equivalent `simp only`, `simp_all only` or `dsimp only`\ninvocation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(usedSimps : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L297-L300","name":"Lean.Elab.Tactic.tactic.simp.trace","line":297,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tactic</span>.<span class=\"name\">simp</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L262-L295","name":"Lean.Elab.Tactic.mkSimpContext","line":262,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext","doc":"Create the `Simp.Context` for the `simp`, `dsimp`, and `simp_all` tactics.\nIf `kind != SimpKind.simp`, the `discharge` option must be `none`\n\nTODO: generate error message if non `rfl` theorems are provided as arguments to `dsimp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eraseLocal : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\">Lean.Elab.Tactic.SimpKind.simp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ignoreStarArg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">Lean.Elab.Tactic.MkSimpContextResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L254-L254","name":"Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper","line":254,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">dischargeWrapper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">Lean.Elab.Tactic.MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Lean.Elab.Tactic.Simp.DischargeWrapper</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L253-L253","name":"Lean.Elab.Tactic.MkSimpContextResult.simprocs","line":253,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simprocs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">simprocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">Lean.Elab.Tactic.MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L252-L252","name":"Lean.Elab.Tactic.MkSimpContextResult.ctx","line":252,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">Lean.Elab.Tactic.MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L251-L251","name":"Lean.Elab.Tactic.MkSimpContextResult.mk","line":251,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dischargeWrapper : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Lean.Elab.Tactic.Simp.DischargeWrapper</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">Lean.Elab.Tactic.MkSimpContextResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L251-L254","name":"Lean.Elab.Tactic.MkSimpContextResult","line":251,"kind":"structure","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L249-L249","name":"Lean.Elab.Tactic.simpOnlyBuiltins","line":249,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpOnlyBuiltins</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L219-L247","name":"Lean.Elab.Tactic.elabSimpArgs.resolveSimpIdTheorem?","line":219,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.resolveSimpIdTheorem?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.resolveSimpIdTheorem?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpArgs</span>.<span class=\"name\">resolveSimpIdTheorem?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(simpArgTerm : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">Lean.Elab.Tactic.ResolveSimpIdResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L214-L217","name":"Lean.Elab.Tactic.elabSimpArgs.isSimproc?","line":214,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.isSimproc?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.isSimproc?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpArgs</span>.<span class=\"name\">isSimproc?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L154-L247","name":"Lean.Elab.Tactic.elabSimpArgs","line":154,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs","doc":"Elaborate extra simp theorems provided to `simp`. `stx` is of the form `\"[\" simpTheorem,* \"]\"`\nIf `eraseLocal == true`, then we consider local declarations when resolving names for erased theorems (`- id`),\nthis option only makes sense for `simp_all` or `*` is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eraseLocal : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">Lean.Elab.Tactic.ElabSimpArgsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L140-L147","name":"Lean.Elab.Tactic.ResolveSimpIdResult.ext","line":140,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.ext","doc":"Recall that when we declare a `simp` attribute using `register_simp_attr`, we automatically\ncreate a `simproc` attribute. However, if the user creates `simp` and `simproc` attributes\nprogrammatically, then one of them may be missing. Moreover, when we write `simp [seval]`,\nwe want to retrieve both the simp and simproc sets. We want to hide from users that\n`simp` and `simproc` sets are stored in different data-structures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ext₁? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Lean.Meta.SimpExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ext₂? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocExtension\">Lean.Meta.Simp.SimprocExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.isSome\">Option.isSome</a> <span class=\"fn\">ext₁?</span></span> <a href=\"./Init/Prelude.html#or\">||</a> <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.isSome\">Option.isSome</a> <span class=\"fn\">ext₂?</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">Lean.Elab.Tactic.ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L139-L139","name":"Lean.Elab.Tactic.ResolveSimpIdResult.simproc","line":139,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.simproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.simproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">simproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">Lean.Elab.Tactic.ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L138-L138","name":"Lean.Elab.Tactic.ResolveSimpIdResult.expr","line":138,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">Lean.Elab.Tactic.ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L137-L137","name":"Lean.Elab.Tactic.ResolveSimpIdResult.none","line":137,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">Lean.Elab.Tactic.ResolveSimpIdResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L136-L147","name":"Lean.Elab.Tactic.ResolveSimpIdResult","line":136,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L134-L134","name":"Lean.Elab.Tactic.ElabSimpArgsResult.starArg","line":134,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.starArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.starArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">starArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">Lean.Elab.Tactic.ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L133-L133","name":"Lean.Elab.Tactic.ElabSimpArgsResult.simprocs","line":133,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simprocs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">simprocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">Lean.Elab.Tactic.ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L132-L132","name":"Lean.Elab.Tactic.ElabSimpArgsResult.ctx","line":132,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">Lean.Elab.Tactic.ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L131-L131","name":"Lean.Elab.Tactic.ElabSimpArgsResult.mk","line":131,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(simprocs : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(starArg : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">Lean.Elab.Tactic.ElabSimpArgsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L131-L134","name":"Lean.Elab.Tactic.ElabSimpArgsResult","line":131,"kind":"structure","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L85-L89","name":"Lean.Elab.Tactic.elabSimpConfig","line":85,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(optConfig : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L65-L73","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.with","line":65,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">with</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Lean.Elab.Tactic.Simp.DischargeWrapper</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L63-L63","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.custom","line":63,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.custom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.custom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">custom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Lean.Elab.Term.State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge : <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Lean.Elab.Tactic.Simp.DischargeWrapper</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L62-L62","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.default","line":62,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Lean.Elab.Tactic.Simp.DischargeWrapper</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L61-L63","name":"Lean.Elab.Tactic.Simp.DischargeWrapper","line":61,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L36-L59","name":"Lean.Elab.Tactic.tacticToDischarge","line":36,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge","doc":"Implement a `simp` discharge function using the given tactic syntax code.\nRecall that `simp` dischargers are in `SimpM` which does not have access to `Term.State`.\nWe need access to `Term.State` to store messages and update the info tree.\nThus, we create an `IO.ref` to track these changes at `Term.State` when we execute `tacticCode`.\nWe must set this reference with the current `Term.State` before we execute `simp` using the\ngenerated `Simp.Discharge`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticToDischarge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tacticCode : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Lean.Elab.Term.State</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L27-L27","name":"Lean.Elab.Tactic.instBEqSimpKind","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instBEqSimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L27-L27","name":"Lean.Elab.Tactic.instInhabitedSimpKind","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedSimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L26-L26","name":"Lean.Elab.Tactic.SimpKind.dsimp","line":26,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.dsimp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L25-L25","name":"Lean.Elab.Tactic.SimpKind.simpAll","line":25,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simpAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simpAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">simpAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L24-L24","name":"Lean.Elab.Tactic.SimpKind.simp","line":24,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Lean.Elab.Tactic.SimpKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L23-L27","name":"Lean.Elab.Tactic.SimpKind","line":23,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L21-L21","name":"Lean.Elab.Tactic.elabDSimpConfigCore","line":21,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabDSimpConfigCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Lean.Meta.DSimp.Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L20-L20","name":"Lean.Elab.Tactic.elabSimpConfigCtxCore","line":20,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfigCtxCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">Lean.Meta.Simp.ConfigCtx</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/a5bc9013ab13f7b186cf154d396036b1d7c23370/src/Lean/Elab/Tactic/Simp.lean#L19-L19","name":"Lean.Elab.Tactic.elabSimpConfigCore","line":19,"kind":"def","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfigCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a></span></span></div></div>"}]}