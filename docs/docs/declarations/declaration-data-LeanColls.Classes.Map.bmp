{"name":"LeanColls.Classes.Map","instances":[],"imports":["Init","LeanColls.Classes.Bag"],"declarations":[{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L55-L55","name":"LeanColls.Map.keySet","line":55,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.keySet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.keySet\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">keySet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet\">LeanColls.Map.KeySet</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L49-L49","name":"LeanColls.Map.remove","line":49,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.remove","doc":"Remove the entry at key `k`, if present. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.remove\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">remove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L47-L47","name":"LeanColls.Map.modify","line":47,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.modify","doc":"Modify the value at key `k`, if present, by applying `f`.\nOtherwise leave the map unchanged. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.modify\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L44-L44","name":"LeanColls.Map.set","line":44,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.set","doc":"Set the entry at key `k` to `v` in `cont`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.set\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L42-L42","name":"LeanColls.Map.alter","line":42,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.alter","doc":"Alter the entry at key `k` in `cont`.\nThe `f` is given the current value at `k`,\nor none if not defined at `k`.\nIf `f` returns `none`, `k` is erased. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.alter\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L37-L37","name":"LeanColls.Map.get?","line":37,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.get?","doc":"Look up `k` in collection `cont` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.get?\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cont : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L35-L35","name":"LeanColls.Map.toBagKeySet","line":35,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.toBagKeySet","doc":"The [Bag] instance providing functions on this collection's [KeySet]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.toBagKeySet\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">toBagKeySet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly\">LeanColls.Bag.ReadOnly</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet\">LeanColls.Map.KeySet</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">κ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L32-L32","name":"LeanColls.Map.mk","line":32,"kind":"ctor","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toMultiBag : <span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag\">LeanColls.MultiBag</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">κ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">τ</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toBagKeySet : <span class=\"fn\"><a href=\"./LeanColls/Classes/Bag.html#LeanColls.Bag.ReadOnly\">LeanColls.Bag.ReadOnly</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet\">LeanColls.Map.KeySet</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(get? : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alter : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">τ</span></span></span>)</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(set : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(modify : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">τ</span> → <span class=\"fn\">τ</span></span>)</span> → <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(remove : <span class=\"fn\"><span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map\">LeanColls.Map</a> <span class=\"fn\">C</span> <span class=\"fn\">κ</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L32-L49","name":"LeanColls.Map","line":32,"kind":"class","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(κ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> v)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(τ : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./LeanColls/Classes/Bag.html#LeanColls.MultiBag\"><span class=\"name\">LeanColls</span>.<span class=\"name\">MultiBag</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max (max (max u (u_1 + 1)) (u_2 + 1)) v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L28-L28","name":"LeanColls.Map.KeySet.data","line":28,"kind":"def","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet.data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet.data\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">KeySet</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet\">LeanColls.Map.KeySet</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L27-L27","name":"LeanColls.Map.KeySet.mk","line":27,"kind":"ctor","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet.mk\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">KeySet</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(data : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet\">LeanColls.Map.KeySet</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/JamesGallicchio/LeanColls/blob/ae815c0bd089ec48e464487c9ccae3ffea753870/LeanColls/Classes/Map.lean#L27-L28","name":"LeanColls.Map.KeySet","line":27,"kind":"structure","docLink":"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet","doc":"Represents the key set of a `C` map.\n\nThis is a trivial wrapper structure on which [Map] instances\nprovide a [Bag] instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanColls/Classes/Map.html#LeanColls.Map.KeySet\"><span class=\"name\">LeanColls</span>.<span class=\"name\">Map</span>.<span class=\"name\">KeySet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}