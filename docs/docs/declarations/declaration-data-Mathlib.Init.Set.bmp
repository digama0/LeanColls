{"name":"Mathlib.Init.Set","instances":[{"typeNames":["Set"],"name":"Set.instMembershipSet","className":"Membership"},{"typeNames":["Set"],"name":"Set.instLESet","className":"LE"},{"typeNames":["Set"],"name":"Set.instHasSubsetSet","className":"HasSubset"},{"typeNames":["Set"],"name":"Set.instEmptyCollectionSet","className":"EmptyCollection"},{"typeNames":["Set"],"name":"Set.instInsertSet","className":"Insert"},{"typeNames":["Set"],"name":"Set.instSingletonSet","className":"Singleton"},{"typeNames":["Set"],"name":"Set.instUnionSet","className":"Union"},{"typeNames":["Set"],"name":"Set.instInterSet","className":"Inter"},{"typeNames":["Set"],"name":"Set.instSDiffSet","className":"SDiff"},{"typeNames":["Set"],"name":"Set.instFunctorSet","className":"Functor"},{"typeNames":["Set"],"name":"Set.instLawfulFunctorSetInstFunctorSet","className":"LawfulFunctor"}],"imports":["Init","Lean.Parser.Term","Std.Classes.SetNotation","Mathlib.Mathport.Rename"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L217-L218","name":"Set.Nonempty","line":217,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.Nonempty","doc":"The property `s.Nonempty` expresses the fact that the set `s` is not empty. It should be used\nin theorem assumptions instead of `‚àÉ x, x ‚àà s` or `s ‚â† ‚àÖ` as it gives access to a nice API thanks\nto the dot notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.Nonempty\"><span class=\"name\">Set</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L207-L212","name":"Set.instLawfulFunctorSetInstFunctorSet","line":207,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instLawfulFunctorSetInstFunctorSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instLawfulFunctorSetInstFunctorSet\"><span class=\"name\">Set</span>.<span class=\"name\">instLawfulFunctorSetInstFunctorSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulFunctor\">LawfulFunctor</a> <a href=\"./Mathlib/Init/Set.html#Set\">Set</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L205-L205","name":"Set.instFunctorSet","line":205,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instFunctorSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instFunctorSet\"><span class=\"name\">Set</span>.<span class=\"name\">instFunctorSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <a href=\"./Mathlib/Init/Set.html#Set\">Set</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L203-L203","name":"Set.image","line":203,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.image","doc":"The image of `s : Set Œ±` by `f : Œ± ‚Üí Œ≤`, written `f '' s`, is the set of `b : Œ≤` such that\n`f a = b` for some `a ‚àà s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.image\"><span class=\"name\">Set</span>.<span class=\"name\">image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ≤</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L199-L199","name":"Set.termùí´_","line":199,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.termùí´_","doc":"`ùí´ s` is the set of all subsets of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.termùí´_\"><span class=\"name\">Set</span>.<span class=\"name\">termùí´_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L197-L197","name":"Set.powerset","line":197,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.powerset","doc":"`ùí´ s` is the set of all subsets of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.powerset\"><span class=\"name\">Set</span>.<span class=\"name\">powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L194-L194","name":"Set.instSDiffSet","line":194,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instSDiffSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instSDiffSet\"><span class=\"name\">Set</span>.<span class=\"name\">instSDiffSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#SDiff\">SDiff</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L192-L192","name":"Set.diff","line":192,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.diff","doc":"The difference of two sets `s` and `t` is the set of elements contained in `s` but not in `t`.\n\nNote that you should **not** use this definition directly, but instead write `s \\ t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.diff\"><span class=\"name\">Set</span>.<span class=\"name\">diff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L187-L187","name":"Set.compl","line":187,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.compl","doc":"The complement of a set `s` is the set of elements not contained in `s`.\n\nNote that you should **not** use this definition directly, but instead write `s·∂ú`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.compl\"><span class=\"name\">Set</span>.<span class=\"name\">compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L182-L182","name":"Set.instInterSet","line":182,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instInterSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instInterSet\"><span class=\"name\">Set</span>.<span class=\"name\">instInterSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Inter\">Inter</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L180-L180","name":"Set.inter","line":180,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.inter","doc":"The intersection of two sets `s` and `t` is the set of elements contained in both `s` and `t`.\n\nNote that you should **not** use this definition directly, but instead write `s ‚à© t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.inter\"><span class=\"name\">Set</span>.<span class=\"name\">inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L175-L175","name":"Set.instUnionSet","line":175,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instUnionSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instUnionSet\"><span class=\"name\">Set</span>.<span class=\"name\">instUnionSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Union\">Union</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L173-L173","name":"Set.union","line":173,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.union","doc":"The union of two sets `s` and `t` is the set of elements contained in either `s` or `t`.\n\nNote that you should **not** use this definition directly, but instead write `s ‚à™ t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.union\"><span class=\"name\">Set</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L168-L168","name":"Set.instSingletonSet","line":168,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instSingletonSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instSingletonSet\"><span class=\"name\">Set</span>.<span class=\"name\">instSingletonSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Singleton\">Singleton</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L166-L166","name":"Set.singleton","line":166,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.singleton","doc":"The singleton of an element `a` is the set with `a` as a single element.\n\nNote that you should **not** use this definition directly, but instead write `{a}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.singleton\"><span class=\"name\">Set</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">Œ±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L161-L161","name":"Set.instInsertSet","line":161,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instInsertSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instInsertSet\"><span class=\"name\">Set</span>.<span class=\"name\">instInsertSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert\">Insert</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L159-L159","name":"Set.insert","line":159,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.insert","doc":"`Set.insert a s` is the set `{a} ‚à™ s`.\n\nNote that you should **not** use this definition directly, but instead write `insert a s` (which is\nmediated by the `Insert` typeclass). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.insert\"><span class=\"name\">Set</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">Œ±</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L152-L152","name":"Set.univ","line":152,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.univ","doc":"The universal set on a type `Œ±` is the set containing all elements of `Œ±`.\n\nThis is conceptually the \"same as\" `Œ±` (in set theory, it is actually the same), but type theory\nmakes the distinction that `Œ±` is a type while `Set.univ` is a term of type `Set Œ±`. `Set.univ` can\nitself be coerced to a type `‚Ü•Set.univ` which is in bijection with (but distinct from) `Œ±`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.univ\"><span class=\"name\">Set</span>.<span class=\"name\">univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L134-L145","name":"Set.setOfPatternMatchUnexpander","line":134,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.setOfPatternMatchUnexpander","doc":"Pretty printing for set-builder notation with pattern matching. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.setOfPatternMatchUnexpander\"><span class=\"name\">Set</span>.<span class=\"name\">setOfPatternMatchUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L129-L130","name":"Set.¬´term{_|_}_2¬ª","line":129,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.¬´term{_|_}_2¬ª","doc":"* `{ pat : X | p }` is notation for pattern matching in set-builder notation,\n  where `pat` is a pattern that is matched by all objects of type `X`\n  and `p` is a proposition that can refer to variables in the pattern.\n  It is the set of all objects of type `X` which, when matched with the pattern `pat`,\n  make `p` come out true.\n* `{ pat | p }` is the same, but in the case when the type `X` can be inferred.\n\nFor example, `{ (m, n) : ‚Ñï √ó ‚Ñï | m * n = 12 }` denotes the set of all ordered pairs of\nnatural numbers whose product is 12.\n\nNote that if the type ascription is left out and `p` can be interpreted as an extended binder,\nthen the extended binder interpretation will be used.  For example, `{ n + 1 | n < 3 }` will\nbe interpreted as `{ x : Nat | ‚àÉ n < 3, n + 1 = x }` rather than using pattern matching.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.¬´term{_|_}_2¬ª\"><span class=\"name\">Set</span>.<span class=\"name\">¬´term{_|_}_2¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L124-L126","name":"Set.macroPattSetBuilder","line":124,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.macroPattSetBuilder","doc":"* `{ pat : X | p }` is notation for pattern matching in set-builder notation,\n  where `pat` is a pattern that is matched by all objects of type `X`\n  and `p` is a proposition that can refer to variables in the pattern.\n  It is the set of all objects of type `X` which, when matched with the pattern `pat`,\n  make `p` come out true.\n* `{ pat | p }` is the same, but in the case when the type `X` can be inferred.\n\nFor example, `{ (m, n) : ‚Ñï √ó ‚Ñï | m * n = 12 }` denotes the set of all ordered pairs of\nnatural numbers whose product is 12.\n\nNote that if the type ascription is left out and `p` can be interpreted as an extended binder,\nthen the extended binder interpretation will be used.  For example, `{ n + 1 | n < 3 }` will\nbe interpreted as `{ x : Nat | ‚àÉ n < 3, n + 1 = x }` rather than using pattern matching.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.macroPattSetBuilder\"><span class=\"name\">Set</span>.<span class=\"name\">macroPattSetBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L106-L107","name":"Set.¬´term{_|_}_1¬ª","line":106,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.¬´term{_|_}_1¬ª","doc":"`{ f x y | (x : X) (y : Y) }` is notation for the set of elements `f x y` constructed from the\nbinders `x` and `y`, equivalent to `{z : Z | ‚àÉ x y, f x y = z}`.\n\nIf `f x y` is a single identifier, it must be parenthesized to avoid ambiguity with `{x | p x}`;\nfor instance, `{(x) | (x : Nat) (y : Nat) (_hxy : x = y^2)}`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.¬´term{_|_}_1¬ª\"><span class=\"name\">Set</span>.<span class=\"name\">¬´term{_|_}_1¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L93-L96","name":"Set.setOf.unexpander","line":93,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.setOf.unexpander","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.setOf.unexpander\"><span class=\"name\">Set</span>.<span class=\"name\">setOf</span>.<span class=\"name\">unexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L84-L84","name":"Set.¬´term{_|_}¬ª","line":84,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.¬´term{_|_}¬ª","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.¬´term{_|_}¬ª\"><span class=\"name\">Set</span>.<span class=\"name\">¬´term{_|_}¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L80-L81","name":"Set.instEmptyCollectionSet","line":80,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instEmptyCollectionSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instEmptyCollectionSet\"><span class=\"name\">Set</span>.<span class=\"name\">instEmptyCollectionSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L77-L78","name":"Set.instHasSubsetSet","line":77,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instHasSubsetSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instHasSubsetSet\"><span class=\"name\">Set</span>.<span class=\"name\">instHasSubsetSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#HasSubset\">HasSubset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L74-L75","name":"Set.instLESet","line":74,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instLESet","doc":"Porting note: we introduce `‚â§` before `‚äÜ` to help the unifier when applying lattice theorems\nto subset hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instLESet\"><span class=\"name\">Set</span>.<span class=\"name\">instLESet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L69-L70","name":"Set.Subset","line":69,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.Subset","doc":"The subset relation on sets. `s ‚äÜ t` means that all elements of `s` are elements of `t`.\n\nNote that you should **not** use this definition directly, but instead write `s ‚äÜ t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.Subset\"><span class=\"name\">Set</span>.<span class=\"name\">Subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L62-L63","name":"Set.ext","line":62,"kind":"theorem","docLink":"./Mathlib/Init/Set.html#Set.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.ext\"><span class=\"name\">Set</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L59-L60","name":"Set.instMembershipSet","line":59,"kind":"instance","docLink":"./Mathlib/Init/Set.html#Set.instMembershipSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.instMembershipSet\"><span class=\"name\">Set</span>.<span class=\"name\">instMembershipSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L56-L57","name":"Set.Mem","line":56,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set.Mem","doc":"Membership in a set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set.Mem\"><span class=\"name\">Set</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">Œ±</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L49-L50","name":"setOf","line":49,"kind":"def","docLink":"./Mathlib/Init/Set.html#setOf","doc":"Turn a predicate `p : Œ± ‚Üí Prop` into a set, also written as `{x | p x}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#setOf\"><span class=\"name\">setOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/7ca43cbd6aa34058a1afad8e47190af3ec1f9bdb/Mathlib/Init/Set.lean#L45-L45","name":"Set","line":45,"kind":"def","docLink":"./Mathlib/Init/Set.html#Set","doc":"A set is a collection of elements of some type `Œ±`.\n\nAlthough `Set` is defined as `Œ± ‚Üí Prop`, this is an implementation detail which should not be\nrelied on. Instead, `setOf` and membership of a set (`‚àà`) should be used to convert between sets\nand predicates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Set.html#Set\"><span class=\"name\">Set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}