{"name":"Std.Data.List.Init.Basic","instances":[],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/List/Init/Basic.lean#L27-L28","name":"List.zipWithAll_cons_cons","line":27,"kind":"theorem","docLink":"./Std/Data/List/Init/Basic.html#List.zipWithAll_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll_cons_cons\"><span class=\"name\">List</span>.<span class=\"name\">zipWithAll_cons_cons</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">α_2</span> : <a href=\"./foundational_types.html\">Type</a> u_3} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α_1</span></span> → <span class=\"fn\">α_2</span></span></span>} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">b</span> : <span class=\"fn\">α_1</span>}\n  {<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α_1</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">bs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/List/Init/Basic.lean#L23-L25","name":"List.zipWithAll_nil_left","line":23,"kind":"theorem","docLink":"./Std/Data/List/Init/Basic.html#List.zipWithAll_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">zipWithAll_nil_left</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">α_2</span> : <a href=\"./foundational_types.html\">Type</a> u_3} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α_1</span></span> → <span class=\"fn\">α_2</span></span></span>} {<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α_1</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">f</span> <span class=\"fn\">[]</span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">α_1</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">none</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">b</span></span>)</span></span></span>)</span> <span class=\"fn\">bs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/List/Init/Basic.lean#L19-L21","name":"List.zipWithAll_nil_right","line":19,"kind":"theorem","docLink":"./Std/Data/List/Init/Basic.html#List.zipWithAll_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">zipWithAll_nil_right</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">α_2</span> : <a href=\"./foundational_types.html\">Type</a> u_3} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α_1</span></span> → <span class=\"fn\">α_2</span></span></span>} {<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">none</span></span></span>)</span> <span class=\"fn\">as</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/a7543d1a6934d52086971f510e482d743fe30cf3/Std/Data/List/Init/Basic.lean#L14-L17","name":"List.zipWithAll","line":14,"kind":"def","docLink":"./Std/Data/List/Init/Basic.html#List.zipWithAll","doc":"Version of `List.zipWith` that continues to the end of both lists, passing `none` to one argument\nonce the shorter list has run out.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/List/Init/Basic.html#List.zipWithAll\"><span class=\"name\">List</span>.<span class=\"name\">zipWithAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">γ</span></span></span></span></div></div>"}]}